
&НаКлиенте
Перем Соединение;

#Область Геокодирование

&НаКлиенте
Процедура ГеокодироватьАдреса(Команда)
	
	Если НЕ ЗначениеЗаполнено(СкладОтгрузки) Тогда
		ПоказатьПредупреждение(,"Нужно выбрать склад отгрузки");
		Возврат;
	КонецЕсли;
	
	Если Настройки.Свойство("СохранятьКоординатыАвтоматически") И
							Настройки.СохранятьКоординатыАвтоматически Тогда
		АвтосохранениеКоординат = Истина;
	Иначе
		АвтосохранениеКоординат = Ложь;
	КонецЕсли;
	
	Для Каждого СтрокаДанные Из Объект.ДанныеЗаказов Цикл  
		Текст = "";
		
		Если ЗначениеЗаполнено(СокрЛП(СтрокаДанные.АдресПолучателя)) И (НЕ ЗначениеЗаполнено(СтрокаДанные.Широта) И 
				НЕ ЗначениеЗаполнено(СтрокаДанные.Долгота)) Тогда 
			
			ДанныеСклада = ПолучитьДанныеСкладаНаСервере(СкладОтгрузки);
			Если НЕ ДанныеСклада = Неопределено Тогда 
				Настройки.Вставить("ШиротаСклада", ДанныеСклада.point.lat);
				Настройки.Вставить("ДолготаСклада", ДанныеСклада.point.lon);
			КонецЕсли;
			СтруктураКоординат = ЯМ_ГеокодированиеКлиент.ГеокодироватьАдрес(СтрокаДанные.АдресПолучателя, Настройки);			
			ЗаполнитьЗначенияСвойств(СтрокаДанные, СтруктураКоординат);
			
			Если СтруктураКоординат.ТочностьГеокодирования = 2 Тогда 
				Текст = "Точность геокодирования этого адреса средняя, найден адрес <<" +
				СтруктураКоординат.АдресПоКоординатам + ">>. Для точной маршрутизации адрес рекомендуется уточнить и 
				|повторить геокодирование";
			ИначеЕсли СтруктураКоординат.ТочностьГеокодирования = 1 Тогда
				Текст = "Точность геокодирования этого адреса низкая, найден адрес <<" +
				СтруктураКоординат.АдресПоКоординатам + ">>. Для точной маршрутизации эти адреса рекомендуется уточнить
				| и повторить геокодирование";
			ИначеЕсли СтруктураКоординат.ТочностьГеокодирования = 9 Тогда
				Текст = "Не удалось выполнить геокодирование для указанного адреса! Проверьте корректность заполнения 
				|поля Адрес получателя!"
			Иначе	
				Если АвтосохранениеКоординат Тогда
					ЗаписатьКоординатыВАдрес(СтрокаДанные.Контрагент,СтрокаДанные.АдресДоставки,
																			СтрокаДанные.Широта,СтрокаДанные.Долгота);
				КонецЕсли;
				Текст = "";
			КонецЕсли;
			
			Если НЕ Текст = "" Тогда 
				Индекс = Объект.ДанныеЗаказов.Индекс(СтрокаДанные);
	            Сообщить = Новый СообщениеПользователю;
	            Сообщить.Текст = Текст;
	            Сообщить.Поле = "Объект.ДанныеЗаказов["+Индекс+"].АдресПолучателя";
	            Сообщить.Сообщить();
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьКоординатыВАдрес(Контрагент,АдресДоставки,Широта,Долгота)
 	РС = РегистрыСведений.ЯМ_СохраненныеКоординаты.СоздатьНаборЗаписей();
	РС.Отбор.Контрагент.Установить(Контрагент);
	РС.Отбор.Адрес.Установить(АдресДоставки);
	РС.Прочитать();
	
	Для Каждого Запись ИЗ РС Цикл
		Запись.Широта = Широта;
		Запись.Долгота = Долгота;
	КонецЦикла;
	РС.Записать();
КонецПроцедуры

&НаСервере
Процедура СохранитьКоординатыНаСервере()
	Для Каждого Стр Из Объект.ДанныеЗаказов Цикл
		Если ЗначениеЗаполнено(Стр.Широта) И ЗначениеЗаполнено(Стр.Долгота) Тогда
			ЗаписатьКоординаты = РегистрыСведений.ЯМ_СохраненныеКоординаты.СоздатьМенеджерЗаписи();
			ЗаписатьКоординаты.Контрагент = Стр.Контрагент;
			ЗаписатьКоординаты.Адрес = Стр.АдресПолучателя;
			ЗаписатьКоординаты.Широта = Стр.Широта;
			ЗаписатьКоординаты.Долгота = Стр.Долгота;
			ЗаписатьКоординаты.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКоординаты(Команда)
	СохранитьКоординатыНаСервере();
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗаполнитьСписок(Команда)	
	Если Конфигурация = "БИТУМЦ" Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаВыбораТипаЗаявок",ЭтотОбъект);
		спКнопок = Новый СписокЗначений;
		спКнопок.Добавить("Консультация","Консультация");
		спКнопок.Добавить("Анализы","Анализы");
	
		ПоказатьВопрос(Оповещение,"Какие заявки отобрать",спКнопок, 0);
	Иначе
		Доп = "";
		
		Объект.ДанныеЗаказов.Очистить();
		ЗаполнитьСписокНаСервере(Доп);
		ЗаполнитьТранспортныеСредстваНаСервере();
	КонецЕсли;
	
	Если Настройки.Свойство("ЗапускатьГеокодированиеАвтоматически") И
							Настройки.ЗапускатьГеокодированиеАвтоматически Тогда
		ГеокодироватьАдреса("");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаВыбораТипаЗаявок(Результат,ДопПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Доп = Результат;

    Объект.ДанныеЗаказов.Очистить();
	ЗаполнитьСписокНаСервере(Доп);
	ЗаполнитьТранспортныеСредстваНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокНаСервере(ДополнительныеПараметры)
	ДанныеЗаказов = ЯМ_МаршрутизацияСервер.ЗаполнитьСписокЗаказов(НастройкаПериода.ДатаНачала,
	НастройкаПериода.ДатаОкончания, СкладОтгрузки, ДополнительныеПараметры);
	ТипыЗначений = Новый СписокЗначений;
	ТипыЗначений.ЗагрузитьЗначения(ПолучитьМассивТипов());	
	Для Каждого ДанныеЗаказа Из ДанныеЗаказов Цикл
		НоваяСтрока = Объект.ДанныеЗаказов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаказа);
		НоваяСтрока.НеобходимыеСвойстваМашины.ДоступныеЗначения = ТипыЗначений;
		//to do: переписать цикл в цикле
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ЯМ_ТегиКлиентовПоУмолчанию.Тег.Наименование КАК Тег
		|ИЗ
		|	РегистрСведений.ЯМ_ТегиКлиентовПоУмолчанию КАК ЯМ_ТегиКлиентовПоУмолчанию
		|ГДЕ
		|	ЯМ_ТегиКлиентовПоУмолчанию.Контрагент = &Контрагент");
		Запрос.УстановитьПараметр("Контрагент",ДанныеЗаказа.Контрагент);
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				НоваяСтрока.НеобходимыеСвойстваМашины.Добавить(Выборка.Тег);
			КонецЦикла;
		КонецЕсли;	
	КонецЦикла;
	ЗаполнитьЗначенияПоУмолчанию();	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияПоУмолчанию()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЯМ_Настройки.Имя КАК Наименование,
	|	ЯМ_Настройки.Значение КАК Значение
	|ИЗ
	|	Справочник.ЯМ_Настройки КАК ЯМ_Настройки
	|ГДЕ
	|	ЯМ_Настройки.Родитель.Наименование = &Родитель
	|	И НЕ ЯМ_Настройки.ПометкаУдаления";
	Запрос.УстановитьПараметр("Родитель", "Значения по умолчанию");
	Выборка = Запрос.Выполнить().Выбрать();
	Данные = Объект.ДанныеЗаказов.Выгрузить();
	Пока Выборка.Следующий() Цикл 
		Попытка
		    Если Выборка.Наименование = "ВременноеОкно" Тогда 
				Для Каждого Стр Из Данные Цикл
					Если НЕ ЗначениеЗаполнено(Стр.ВременноеОкно) Тогда
						Стр.ВременноеОкно = Выборка.Значение;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Данные.ЗаполнитьЗначения(Выборка.Значение, Выборка.Наименование);
			КонецЕсли;
		Исключение
		КонецПопытки;				
	КонецЦикла;
	Объект.ДанныеЗаказов.Загрузить(Данные);
	
	Для Каждого ДанныеЗаказа из Объект.ДанныеЗаказов Цикл 
		Если ЗначениеЗаполнено(ДанныеЗаказа.ШтрафыДляЗаказов) Тогда 
			СтруктураШтрафов = ЯМ_МаршрутизацияСервер.СформироватьСтруктуруШтрафов(ДанныеЗаказа.ШтрафыДляЗаказов);
			ДанныеЗаказа.ШтрафыЗаМинуту						= СтруктураШтрафов.out_of_time.minute;
			ДанныеЗаказа.ШтрафыЗаФактНарушенияОкнаДоставки 	= СтруктураШтрафов.out_of_time.fixed;
			ДанныеЗаказа.ШтрафыЗаНедоставку					= СтруктураШтрафов.drop;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьВЭксельНаСервере(ОднаКнига)
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	
	ДанныеДляЗапроса = ПолучитьДанныеДляЗапроса(СкладОтгрузки);		
	
	// Orders
	Макет = ОбъектОбработка.ПолучитьМакет("mvrporders");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.Вывести(ОбластьШапка);
	Для Каждого СтрокаТаблицы Из Объект.ДанныеЗаказов Цикл 
		ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры, СтрокаТаблицы);
		ТегиСтрокой = "";
		Для Каждого стрСписка ИЗ СтрокаТаблицы.НеобходимыеСвойстваМашины Цикл 
			ТегиСтрокой = ТегиСтрокой + стрСписка.Значение + ","; 
		КонецЦикла;
		Если НЕ ТегиСтрокой = "" Тогда 
			ТегиСтрокой = Лев(ТегиСтрокой, СтрДлина(ТегиСтрокой) - 1);	
		КонецЕсли;
		ОбластьСтрока.Параметры.НеобходимыеСвойстваМашины = ТегиСтрокой;
		ТабДок.Вывести(ОбластьСтрока);
	КонецЦикла;
	НоваяСтраница = ОднаКнига.Состав.Добавить();
	НоваяСтраница.Данные = ПоместитьВоВременноеХранилище(ТабДок);
	НоваяСтраница.Наименование = "Orders";
	
	// vehicles
	Макет = ОбъектОбработка.ПолучитьМакет("vehicles");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.Вывести(ОбластьШапка);
	Для Каждого СтрокаТаблицы Из ДанныеДляЗапроса.Машины Цикл 
		ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры, СтрокаТаблицы);
		ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры, СтрокаТаблицы.capacity);
		ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры, СтрокаТаблицы.capacity.volume);
		ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры, СтрокаТаблицы.shifts[0],, "id");
		ТабДок.Вывести(ОбластьСтрока);
	КонецЦикла;
	НоваяСтраница = ОднаКнига.Состав.Добавить();
	НоваяСтраница.Данные = ПоместитьВоВременноеХранилище(ТабДок);
	НоваяСтраница.Наименование = "Vehicles";
	
	// depot
	Макет = ОбъектОбработка.ПолучитьМакет("depot");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.Вывести(ОбластьШапка);
	ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры, ДанныеДляЗапроса.Склады);
	ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры, ДанныеДляЗапроса.Склады.point);
	ТабДок.Вывести(ОбластьСтрока);
	НоваяСтраница = ОднаКнига.Состав.Добавить();
	НоваяСтраница.Данные = ПоместитьВоВременноеХранилище(ТабДок);
	НоваяСтраница.Наименование = "Depot";
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВЭксель(Команда)
	
	Режим = РежимДиалогаВыбораФайла.Сохранение; 
	ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(Режим); 
	ДиалогСохраненияФайла.ПолноеИмяФайла = "mvrporders_" + Формат(ТекущаяДата(),"ДФ=yyyyMMdd_HHMMss"); 
	Фильтр = "Документ Excel (*.xlsx)|*.xlsx|";                 
	ДиалогСохраненияФайла.Фильтр = Фильтр; 
	ДиалогСохраненияФайла.МножественныйВыбор = Ложь; 
	ДиалогСохраненияФайла.Заголовок = "Выберите файл"; 
	Если ДиалогСохраненияФайла.Выбрать() Тогда 
		//ТабДок = Новый ТабличныйДокумент;
		ОднаКнига = Новый ПакетОтображаемыхДокументов;
		ВыгрузитьВЭксельНаСервере(ОднаКнига);
		ОднаКнига.Записать(ДиалогСохраненияФайла.ПолноеИмяФайла, ТипФайлаПакетаОтображаемыхДокументов.XLSX);
	КонецЕсли;  	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВБраузереПоУмолчанию(Команда)
	
	ЗапуститьПриложение("https://yandex.ru/routing/");

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВ1С(Команда)
	
	Попытка
		ПолеHTML = "https://yandex.ru/routing/";
		Элементы.Страница2.Видимость = Истина;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПериод(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = НастройкаПериода;
	Диалог.Показать(Новый ОписаниеОповещения("ОбработчикИзмененияПериода", ЭтотОбъект, Новый Структура("Диалог", Диалог)));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикИзмененияПериода(Период, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ Период = Неопределено Тогда
		Если Период.ДатаНачала > Период.ДатаОкончания И ЗначениеЗаполнено(Период.ДатаОкончания) Тогда
			ПоказатьПредупреждение(,"Дата начала периода должна быть меньше даты окончания периода!");
			Возврат;
		КонецЕсли;
		НастройкаПериода = Период;
		УстановитьНадписьКнопкиПериода();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНадписьКнопкиПериода()
	
	Элементы.ИзменитьПериод.Заголовок = ПолучитьНадписьДляКнопкиВыбораПериода(НастройкаПериода.ДатаНачала, НастройкаПериода.ДатаОкончания);  
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьНадписьДляКнопкиВыбораПериода(ДатаНачала, ДатаОкончания) Экспорт
	
	Если ЗначениеЗаполнено(ДатаНачала)
		И ЗначениеЗаполнено(ДатаОкончания) Тогда
		ПоказыватьГод = НЕ Год(ДатаНачала) = Год(ДатаОкончания);
	Иначе
		ПоказыватьГод = Ложь;
	КонецЕсли;
	
	стрДатаНачала 	= ПолучитьПредставлениеДаты(ДатаНачала, ПоказыватьГод);
	стрДатаОкончания = ПолучитьПредставлениеДаты(ДатаОкончания, ПоказыватьГод);
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		ВерхняяСтрока 	= "с " + стрДатаНачала;
	Иначе
		ВерхняяСтрока 	= "";
	КонецЕсли;
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		НижняяСтрока  	=  " по " + стрДатаОкончания;
	Иначе
		НижняяСтрока 	= "";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДатаНачала) И НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		ВерхняяСтрока 	= "за все время";
		НижняяСтрока 	= "";
	КонецЕсли;
		
	Возврат ВерхняяСтрока + НижняяСтрока;  
	
КонецФункции	

&НаКлиенте
Функция ПолучитьПредставлениеДаты(Дата, ПоказыватьГод = Ложь)
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Возврат "";
	КонецЕсли;
	
	ПредставлениеДатыПериода = "";
	
	ТекущийГод = Год(ТекущаяДата());
	
	ДеньДата 	= День(Дата);
	МесяцДата 	= Месяц(Дата);
	ГодДата 	= Год(Дата);
	
	ПредставлениеДатыПериода = Строка(ДеньДата) + " " + ПолучитьПредставлениеМесяцаВРодПадеже(МесяцДата) 
								+ ?((ПоказыватьГод ИЛИ НЕ ГодДата = ТекущийГод), " " + Формат(ГодДата, "ЧГ="), "");
						
	Возврат ПредставлениеДатыПериода;					
						
КонецФункции

&НаКлиенте
Функция ПолучитьПредставлениеМесяцаВРодПадеже(НомерМесяца)
	
	Если НомерМесяца = 1 Тогда
		Возврат "января";
	ИначеЕсли НомерМесяца = 2 Тогда
		Возврат "февраля";
	ИначеЕсли НомерМесяца = 3 Тогда
		Возврат "марта";
	ИначеЕсли НомерМесяца = 4 Тогда
		Возврат "апреля";
	ИначеЕсли НомерМесяца = 5 Тогда
		Возврат "мая";
	ИначеЕсли НомерМесяца = 6 Тогда
		Возврат "июня";
	ИначеЕсли НомерМесяца = 7 Тогда
		Возврат "июля";
	ИначеЕсли НомерМесяца = 8 Тогда
		Возврат "августа";
	ИначеЕсли НомерМесяца = 9 Тогда
		Возврат "сентября";
	ИначеЕсли НомерМесяца = 10 Тогда
		Возврат "октября";
	ИначеЕсли НомерМесяца = 11 Тогда
		Возврат "ноября";
	ИначеЕсли НомерМесяца = 12 Тогда
		Возврат "декабря";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ДатаПланирования = НачалоДня(ТекущаяДата()) + 86400;
	
	Если Конфигурация = "" Тогда 
		Элементы.ВыгрузитьВЭксель.Доступность = ЛожЬ;
		Элементы.ИзменитьПериод.Доступность = Ложь;
		Элементы.ЗаполнитьСписок.Доступность = Ложь;
		Элементы.ДанныеЗаказов.Доступность = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(idПланирования) Тогда 
		ПоказатьРезультатыПланирования(idПланирования);
		СсылкаНаПланированиеЗаполнениеИВидимость();
	КонецЕсли;
	
	УстановитьНадписьКнопкиПериода();
	НастройкаОформления();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОформления()
	Если Конфигурация = "БИТУМЦ" Тогда
		Элементы.ДанныеЗаказовНаименованиеПолучателя.Заголовок				= "ФИО";
		Элементы.ДанныеЗаказовАдресПолучателя.Заголовок						= "Адрес";
		Элементы.ДанныеЗаказовКоличествоМест.Заголовок						= "Количество заявок";
		Элементы.ДанныеЗаказовНеобходимыеСвойстваМашины.Видимость			= Ложь;
		Элементы.ДанныеЗаказовШтрафыЗаМинуту.Видимость						= Ложь;
		Элементы.ДанныеЗаказовШтрафыЗаФактНарушенияОкнаДоставки.Видимость	= Ложь;
		Элементы.ДанныеЗаказовШтрафыЗаНедоставку.Видимость					= Ложь;
		Элементы.ДанныеЗаказовТипЗаказа.Видимость							= Ложь;
		Элементы.ДанныеЗаказовГабариты.Видимость							= Ложь;
		Элементы.ДанныеЗаказовВесБрутто.Видимость							= Ложь;
		Элементы.ДанныеЗаказовВремяЗагрузкиЗаказаНаСкладе.Видимость			= Ложь;
		
		Элементы.ОтборМашинТеги.Заголовок									= "Отбор докторов по навыкам";
		
		Элементы.ТаблицаТочекДоставкиweight.Видимость						= Ложь;
		Элементы.ТаблицаТочекДоставкиvolume.Видимость						= Ложь;
		Элементы.ТаблицаТочекДоставкиlat.Видимость							= Ложь;
		Элементы.ТаблицаТочекДоставкиlon.Видимость							= Ложь;
		//Элементы.ТаблицаТочекДоставкиМашина.Видимость						= Ложь;
		Элементы.ТаблицаТочекДоставкиcustomer_name.Заголовок				= "Клиент";
		
		Элементы.ТранспортныеСредстваЛогинКурьера.Видимость					= Ложь;
		//Показать примечание, комментарий
		//Время на обслуживание
	КонецЕсли;
	
	Если Настройки.Свойство("РасчетВМинутах") И Настройки.РасчетВМинутах Тогда
		Элементы.ДанныеЗаказовВремяОбслуживанияАдрес.Заголовок				= "На адрес, мин";
		Элементы.ДанныеЗаказовВремяОбслуживанияЗаказ.Заголовок				= "На заказ, мин";
		Элементы.ТаблицаТочекДоставкиshared_service_duration_s.Заголовок	= "На адрес, мин";
		Элементы.ТаблицаТочекДоставкиservice_duration_s.Заголовок			= "На заказ, мин";
	КонецЕсли;
	
	Если Настройки.Свойство("ЗапускатьГеокодированиеАвтоматически") И 
						Настройки.ЗапускатьГеокодированиеАвтоматически Тогда
		Элементы.ФормаГеокодироватьАдреса.Видимость = Ложь;		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)		
	Конфигурация = ЯМ_СлужебныйСервер.ОпределитьКонфигурацию();		
	Настройки = ЯМ_РаботаСНастройками.ПолучитьНастройкиМодуля();
	ЗаполнитьТранспортныеСредстваНаСервере();
	
	Если Параметры.Свойство("idПланирования") И ЗначениеЗаполнено(Параметры.idПланирования) Тогда 
		idПланирования = Параметры.idПланирования;
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Страница4;
	КонецЕсли;
	
	НастройкаПериода.Вариант = ВариантСтандартногоПериода.Завтра;
	СкладОтгрузки = ЗаполнитьПервымПопавшимсяСкладом();
КонецПроцедуры

&НаСервере
Функция ЗаполнитьПервымПопавшимсяСкладом()
	СкладОтгрузки = Справочники.ЯМ_СкладыОтгрузки.ПустаяСсылка();
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЯМ_СкладыОтгрузки.Ссылка КАК СкладОтгрузки
	|ИЗ
	|	Справочник.ЯМ_СкладыОтгрузки КАК ЯМ_СкладыОтгрузки
	|ГДЕ
	|	НЕ ЯМ_СкладыОтгрузки.ПометкаУдаления
	|	И ЯМ_СкладыОтгрузки.Работает");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		СкладОтгрузки = Выборка.СкладОтгрузки;
	КонецЕсли;
	
	Возврат СкладОтгрузки;
КонецФункции	
	
&НаСервере
Процедура ЗаполнитьТранспортныеСредстваНаСервере()
	
	ТранспортныеСредства.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИСТИНА КАК Использовать,
	|	ЯМ_ТранспортныеСредства.Ссылка КАК ТранспортноеСредство,
	|	ЯМ_ТранспортныеСредства.ЛогинКурьера КАК ЛогинКурьера,
	|	ЯМ_ТранспортныеСредства.НомерТелефона КАК НомерТелефона,
	|	ЯМ_ТранспортныеСредства.СпособПеремещения КАК СпособПеремещения
	|ИЗ
	|	Справочник.ЯМ_ТранспортныеСредства КАК ЯМ_ТранспортныеСредства
	|ГДЕ
	|	НЕ ЯМ_ТранспортныеСредства.ПометкаУдаления
	|	И ЯМ_ТранспортныеСредства.Работает";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		НовоеТС = ТранспортныеСредства.Добавить();
		ЗаполнитьЗначенияСвойств(НовоеТС, Выборка);
		НовоеТС.Использовать = Ложь;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗапросНаМаршрутизацию(Команда)
	
	Если Объект.ДанныеЗаказов.Количество() = 0 Тогда 
		Сообщить("В списке нет ни одного заказа, отправка запроса невозможна!");
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Использовать", Истина);
	Если НЕ ТранспортныеСредства.НайтиСтроки(ПараметрыОтбора).Количество() Тогда 
		ПоказатьПредупреждение(,"Не выбраны транспортные средства, запрос не отправлен.");
		Возврат;
	КонецЕсли;
	
	Результат = ВыполнитьЗапросНаМаршрутизацию();
	
	Если Результат Тогда
		ПоказатьПредупреждение(,"Запрос на маршрутизацию отправлен успешно");
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Страница4;
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("idПланирования", idПланирования);
		ПараметрыОтбора.Вставить("КоличествоЗаказов", Объект.ДанныеЗаказов.Количество());
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ГовнокодПереписать", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.ЯМ_Ожидание",ПараметрыОтбора,,,,,ОповещениеОЗавершении,
												РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ПоказатьПредупреждение(,"Ошибка");
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ГовнокодПереписать(Говно,Код) Экспорт
	СсылкаНаПланированиеЗаполнениеИВидимость();
	ПоказатьРезультатыПланирования(idПланирования);	
КонецПроцедуры

&НаСервере
Функция ПолучитьЧасовойПоясСеанса()
	
	Возврат СмещениеСтандартногоВремени()/3600;
	
КонецФункции

&НаСервере
Функция ПолучитьДополнительныеОпцииЗапроса() 
	
	ДопОпции = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЯМ_Настройки.Имя КАК Имя,
	|	ЯМ_Настройки.Значение КАК Значение
	|ИЗ
	|	Справочник.ЯМ_Настройки КАК ЯМ_Настройки
	|ГДЕ
	|	ЯМ_Настройки.Родитель.Наименование = &Родитель
	|	И НЕ ЯМ_Настройки.ПометкаУдаления";
	Запрос.УстановитьПараметр("Родитель", "Опции");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		Если Выборка.Имя = "balanced_groups" И Выборка.Значение = Истина Тогда 
			ДопОпции.Добавить(Новый Структура("Имя,Значение", Выборка.Имя, ЯМ_МаршрутизацияСервер.ПолучитьГруппыБалансировки()));
		ИначеЕсли Выборка.Имя = "balanced_groups" И Выборка.Значение = Ложь Тогда 
			Продолжить;
		Иначе	
			ДопОпции.Добавить(Новый Структура("Имя,Значение", Выборка.Имя, Выборка.Значение));
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДопОпции;
	
КонецФункции

&НаСервере

&НаСервере
Функция ПолучитьДанныеДляЗапроса(СкладПогрузки)
	
	ДанныеДляЗапроса = Новый Структура;
	
	// дополнительные опции
	ДопОпции = ПолучитьДополнительныеОпцииЗапроса();
	
	// свойства склада / depot
	Склады = ПолучитьДанныеСкладаНаСервере(СкладПогрузки);
		
	// свойства точек доставки / locations
	ТочкиДоставки = ПолучитьДанныеТочекДоставкиНаСервере();
	
	// свойства автомобилей / vehicles
	МассивТС = Новый Массив;
	Для Каждого ТС ИЗ ТранспортныеСредства Цикл 
		Если ТС.Использовать Тогда 
			МассивТС.Добавить(ТС.ТранспортноеСредство);
		КонецЕсли;
	КонецЦикла;
	Машины = ПолучитьДанныеМашинНаСервере(ТочкиДоставки, МассивТС);	
	
	ДанныеДляЗапроса.Вставить("ДопОпции", 		ДопОпции);
	ДанныеДляЗапроса.Вставить("Склады", 		Склады);
	ДанныеДляЗапроса.Вставить("ТочкиДоставки", 	ТочкиДоставки);
	ДанныеДляЗапроса.Вставить("Машины", 		Машины);
	
	Возврат ДанныеДляЗапроса;	
	
КонецФункции

&НаКлиенте
Функция ВыполнитьЗапросНаМаршрутизацию()
	// Для дополнительной информации при доработках запросов необходимо обращаться 
	// к инструкциям по адресу https://yandex.ru/routing/doc/vrp/
	
	Для Каждого СтрокаТЧ Из Объект.ДанныеЗаказов Цикл 
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Широта) ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.Долгота) Тогда 
			Сообщить("Перед отправкой запроса широта и долгота всех точек доставки должны быть заполнены!
			| -Координаты можно заполнить вручную в таблице документов непосредственно перед отправкой запроса
			| -Координаты могут быть сгенерированы случайным образом при заполнении таблицы документов на основании 
			|координат склада. 
			|Для этого раскомментируйте код генерации в методе заполнения таблицы
			| -Координаты могут быть получены с помощью геокодера или сохранены в учетной системе");
			Возврат Ложь;	
		КонецЕсли;
	КонецЦикла;
	
	Ответ = СоздатьХТТПСоедиение(Настройки.АдресСервисаМаршрутизация);	
						
	КодСостояния = Ответ.КодСостояния;
	
	Если НЕ Ответ.HTTPОтвет Тогда 
		
		Сообщить("Ощибка формирования запроса! Код ошибки " + Строка(КодСостояния) + " 
		|Информация о структуре запросов и их примеры в инструкции https://yandex.ru/routing/doc/vrp/");
		
		Возврат Ложь;
		
	Иначе
		
		Если КодСостояния >= 500 Тогда 
			
			ЗаписатьДанныеЗапросаНаСервере(КодСостояния, ,"");
			
		Иначе
			Результат = Ответ.Результат;
			
			Если Результат.Свойство("error") Тогда
				id = Результат.error.incident_id;
				Сообщение = Результат.error.message;
				Статус = "Error";
				Сообщить("Ошибка при отправке запроса! Сообщение сервиса: " + Сообщение);
				ОбработатьКодСостоянияОтвета(КодСостояния);
			ИначеЕсли Результат.Свойство("id") Тогда
				id = Результат.id;
				Сообщение = Результат.Message;
				Статус = Результат.Status;
				idПланирования = id;
				Элементы.ДекорацияСообщение.Видимость = Истина;
			КонецЕсли;
			ЗаписатьДанныеЗапросаНаСервере(id, Статус, Сообщение);
			СсылкаНаПланированиеЗаполнениеИВидимость();
		КонецЕсли;
				
	КонецЕсли;
	
	Возврат Истина;	
		
КонецФункции

&НаСервере
Функция СоздатьХТТПСоедиение(АдресСервисаМаршрутизация)
	Соединение = Новый HTTPСоединение(АдресСервисаМаршрутизация,,,
			,Новый ИнтернетПрокси(Истина)
			,
			,Новый ЗащищенноеСоединениеOpenSSL);
	
	// опции запроса / options
	Опции = Новый Структура();
	Опции.Вставить("routing_mode", "driving");
	Опции.Вставить("time_zone", ПолучитьЧасовойПоясСеанса());
	Опции.Вставить("date", Формат(ДатаПланирования, "ДФ=yyyy-MM-dd"));
	Опции.Вставить("quality", "normal");
	
	ДанныеДляЗапроса = ПолучитьДанныеДляЗапроса(СкладОтгрузки);		
	
	Для Каждого Опция Из ДанныеДляЗапроса.ДопОпции Цикл 
		Опции.Вставить(Опция.Имя, Опция.Значение);
	КонецЦикла;
	
	// параметры подключения
	Ключ = Настройки.КлючAPI_ЯндексМаршрутизация;
	Адрес = Настройки.АдресОтправкиЗапроса + Ключ;

	Запрос = Новый HTTPЗапрос(Адрес);
	Запрос.Заголовки.Вставить("Content-Type",	"application/json");
	Запрос.Заголовки.Вставить("Accept",			"application/json");
	Запрос.Заголовки.Вставить("User Agent",		"Yandex Routing 1C module_v3");
	
	ПересчитатьМинутыВСекунды(ДанныеДляЗапроса.Склады, ДанныеДляЗапроса.ТочкиДоставки);
	
	// формирование запроса
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	СтрокаJSON = Новый Структура("options, depot, vehicles, locations", Опции, ДанныеДляЗапроса.Склады, 
															ДанныеДляЗапроса.Машины, ДанныеДляЗапроса.ТочкиДоставки);
	ЗаписатьJSON(ЗаписьJSON, СтрокаJSON);
	ТекстТелаЗапроса = СтрЗаменить(ЗаписьJSON.Закрыть(),"\\","\");
	Запрос.УстановитьТелоИзСтроки(ТекстТелаЗапроса);

	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	
	СтруктураОтвет = Новый Структура;
	СтруктураОтвет.Вставить("КодСостояния",Ответ.КодСостояния);
	Если ТипЗнч(Ответ) = Тип("HTTPОтвет") Тогда
		СтруктураОтвет.Вставить("HTTPОтвет",Истина);
		
		Чтение = Новый ЧтениеJSON;
		ОтветСтрокой = Ответ.ПолучитьТелоКакСтроку(); 
		Чтение.УстановитьСтроку(ОтветСтрокой);
		Результат = ПрочитатьJSON(Чтение);
		СтруктураОтвет.Вставить("Результат",Результат);	
	Иначе
		СтруктураОтвет.Вставить("HTTPОтвет",Ложь);
		СтруктураОтвет.Вставить("Результат","");		
	КонецЕсли;
	
	Возврат СтруктураОтвет;
КонецФункции

Процедура ПересчитатьМинутыВСекунды(Склады, ТабТочкиДоставки)
	Если Настройки.Свойство("РасчетВМинутах") И Настройки.РасчетВМинутах Тогда
		КратностьВремени = 60;

		Склады.finish_service_duration_s	= Склады.finish_service_duration_s * КратностьВремени;
		Склады.service_duration_s 			= Склады.service_duration_s * КратностьВремени;
		
		Для Каждого ТочкаДоставки Из ТабТочкиДоставки Цикл
			ТочкаДоставки.depot_duration_s			= ТочкаДоставки.depot_duration_s * КратностьВремени;
			ТочкаДоставки.service_duration_s		= ТочкаДоставки.service_duration_s * КратностьВремени;
			ТочкаДоставки.shared_service_duration_s	= ТочкаДоставки.shared_service_duration_s * КратностьВремени;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры	
	
&НаСервере
Функция ПолучитьДанныеСкладаНаСервере(Склад)
	
	Возврат ЯМ_МаршрутизацияСервер.ПолучитьДанныеСклада(Склад);
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеМашинНаСервере(ТочкиДоставки, ТраспортныеСредства)
	
	Возврат ЯМ_МаршрутизацияСервер.ПолучитьДанныеМашин(ТочкиДоставки, ТраспортныеСредства);
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеТочекДоставкиНаСервере()
	
	Возврат ЯМ_МаршрутизацияСервер.ПолучитьДанныеТочекДоставки(Объект.ДанныеЗаказов);
	
КонецФункции

&НаСервере
Процедура ЗаписатьДанныеЗапросаНаСервере(id, Статус, Сообщение)
	
	ЯМ_МаршрутизацияСервер.ЗаписатьДанныеЗапроса(id, Статус, Сообщение, "Запрос");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки(Команда)

	ОткрытьФорму("Справочник.ЯМ_Настройки.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКодСостоянияОтвета(КодСостояния)
	
	Текст = "";
	
	// Ошибки 4XX говорят о неправильном запросе - в широком смысле
	// Может быть неправильный адрес, ошибка аутентификации, плохой формат запроса
	// Подробнее смотри http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4
	Если КодСостояния >= 400 и КодСостояния < 500  Тогда
		Текст = "Код статуса больше 4XX, ошибка запроса.  Код статуса: " + КодСостояния;
	КонецЕсли;
	
	// Ошибки 5XX говорят о проблемах на сервере (возможно, прокси-сервер)
	// Это может быть программная ошибка, нехватка памяти, ошибка конфигурации и т.д.
	// Подробнее смотри http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5
	Если КодСостояния >= 500 и КодСостояния < 600  Тогда
		Текст = "Код статуса больше 5XX, ошибка сервера. Код статуса: " + КодСостояния;
	КонецЕсли;
	
	// Обрабатываем перенаправление
	Если КодСостояния >= 300 и КодСостояния < 400  Тогда
		Текст = "Код статуса больше 3XX, Перенаправление. Код статуса: " + КодСостояния;
		Если КодСостояния = 302 Тогда
			Текст = "Код статуса 302, Постоянное перенаправление";
		КонецЕсли;
	КонецЕсли;	
	
	Если НЕ Текст = "" Тогда 
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Текст;
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапросыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.Запросыid Тогда
		СтандартнаяОбработка = Ложь;
		ЗадачаID = Элементы.Запросы.ТекущиеДанные.id;
		СсылкаНаСервис = Настройки.АдресПросмотраРезультатов + Строка(ЗадачаID);
		ЗапуститьПриложение(СсылкаНаСервис);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КачествоДоставки(Команда)
	//GET https://courier.yandex.ru/api/v1/companies/{company_id}/courier-quality\
	//?date={string}\
	
	// 8598
		
	Ответ = КачествоДоставкиНаСервере();
	
	КодСостояния = Ответ.КодСостояния;
	
	Если НЕ Ответ.HTTPОтвет Тогда 
		
		Сообщить("Ощибка формирования запроса! Код ошибки " + Строка(КодСостояния) + " 
		|Информация о структуре запросов и их примеры в инструкции https://yandex.ru/routing/doc/vrp/");
		
		Возврат;		
	Иначе	
		Если КодСостояния >= 500 Тогда 		
			//ЗаписатьДанныеЗапросаНаСервере(КодСостояния, , "");
		ИначеЕсли КодСостояния = 403 Тогда
			Сообщить("У вас нет доступа к этому объекту.");
			Сообщить(Ответ.Результат.message);
		ИначеЕсли КодСостояния = 404 Тогда
			Сообщить(Ответ.Результат.message);
		ИначеЕсли КодСостояния = 401 Тогда
			Сообщить("Ошибка авторизации. Убедитесь, что заголовок запроса содержит правильный OAuth-токен.");
			Сообщить(Ответ.Результат.message);
		ИначеЕсли КодСостояния = 422 Тогда
			Сообщить("Неверный ввод. Операция не может быть выполнена.");
			Сообщить(Ответ.Результат.message);
		ИначеЕсли КодСостояния = 200 Тогда
			
			Результат = Ответ.Результат;
			
			//@skip-warning Результат всегда структура, формируется в другой процедуре
			Для Каждого СтрокаРезультата Из Результат Цикл 
				order_status = СтрокаРезультата.order_status;
				order_completed_at = Неопределено;
				Если НЕ СтрокаРезультата.order_completed_at = Неопределено Тогда 
					order_completed_at = Лев(СтрокаРезультата.order_completed_at, 19);
					order_completed_at = Дата(СтрЗаменить(СтрЗаменить(СтрЗаменить(order_completed_at, "T", ""), "-", ""), ":", ""));
				КонецЕсли;
				Попытка
					т_НомерДокумента = ПолучитьДокументВЗависимостиОтКонфигурации(СтрокаРезультата.order_number);
					ДокСсылкаНомер = ВернутьНомерДокумента(т_НомерДокумента);
					МассивЗначений = ТаблицаТочекДоставки.НайтиСтроки(Новый Структура("route_number, number", СтрокаРезультата.route_number,ДокСсылкаНомер));
				Исключение
					Сообщить("Заказ пропущен - " + СтрокаРезультата.order_number);
					Продолжить;
				КонецПопытки;
				Если МассивЗначений.Количество() Тогда 
					МассивЗначений[0].status = order_status;
					МассивЗначений[0].arrival_time_s = order_completed_at;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			Сообщить("Неизвестная ошибка");
			Сообщить(Ответ.Результат.message);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьНомерДокумента(тДок) 
	Возврат тДок.Номер;
КонецФункции

&НаСервере
Функция КачествоДоставкиНаСервере()
	Соединение = Новый HTTPСоединение("courier.yandex.ru",,,
			,Новый ИнтернетПрокси(Истина)
			,
			,Новый ЗащищенноеСоединениеOpenSSL);	
			
	Адрес = "/api/v1/companies/" + Настройки.idКомпании + "/courier-quality" + "?date=" + Формат(ДатаРезультатов, "ДФ=yyyy-MM-dd"); //Объект.АдресОтправкиЗапроса + Ключ;

	Запрос = Новый HTTPЗапрос(Адрес);
	Запрос.Заголовки.Вставить("Content-Type",	"application/json");
	Запрос.Заголовки.Вставить("Accept",			"application/json");
	Запрос.Заголовки.Вставить("Authorization",	"Auth " + Настройки.Токен_ЯндексМониторинг);
	
	Ответ = Соединение.Получить(Запрос);
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("КодСостояния",Ответ.КодСостояния);
	
	Если ТипЗнч(Ответ) = Тип("HTTPОтвет") Тогда
		СтруктураОтвета.Вставить("HTTPОтвет",Истина);
		
		Чтение = Новый ЧтениеJSON;
		ОтветСтрокой = Ответ.ПолучитьТелоКакСтроку(); 
		Чтение.УстановитьСтроку(ОтветСтрокой);
		Результат = ПрочитатьJSON(Чтение);
			
		СтруктураОтвета.Вставить("Результат",Результат);
	Иначе
		СтруктураОтвета.Вставить("HTTPОтвет",Ложь);
		СтруктураОтвета.Вставить("Результат","");
	КонецЕсли;
	
	Возврат СтруктураОтвета;
КонецФункции

&НаКлиенте
Процедура ДанныеЗаказовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элемент = Элементы.ДанныеЗаказовНеобходимыеСвойстваМашины Тогда 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеЗаказовНеобходимыеСвойстваМашиныНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТипыЗначений = Новый СписокЗначений;
	ТипыЗначений.ЗагрузитьЗначения(ПолучитьМассивТипов());
	стр = Элементы.ДанныеЗаказов.ТекущиеДанные;
	стр.НеобходимыеСвойстваМашины.ДоступныеЗначения = ТипыЗначений;
КонецПроцедуры
	
&НаСервереБезКонтекста
Функция ПолучитьМассивТипов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЯМ_Теги.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ЯМ_Теги КАК ЯМ_Теги
	|ГДЕ
	|	НЕ ЯМ_Теги.ПометкаУдаления";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Наименование");
	
КонецФункции

&НаКлиенте
Процедура ДанныеЗаказовНеобходимыеСвойстваМашиныПриИзменении(Элемент)
	    
    сзСвернуто = Новый СписокЗначений;
    
    Для Каждого эл_сзИсходная Из Элементы.ДанныеЗаказов.ТекущиеДанные.НеобходимыеСвойстваМашины Цикл
        Если сзСвернуто.НайтиПоЗначению(эл_сзИсходная.Значение) = Неопределено Тогда
            сзСвернуто.Добавить(эл_сзИсходная.Значение, эл_сзИсходная.Представление);
        КонецЕсли;
    КонецЦикла;
	
	Элементы.ДанныеЗаказов.ТекущиеДанные.НеобходимыеСвойстваМашины = сзСвернуто;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВМониторинг(Команда)

	ДанныеСправочниковДляОбновления = ПолучитьДанныеСправочниковДляОбновления();
	
	// обновить машины
	ЯМ_МониторингКлиент.ОбновитьМашиныВМониторинге(ДанныеСправочниковДляОбновления.ДанныеМашинДляМониторинга, Настройки);
	
	// обновить склады
	ЯМ_МониторингКлиент.ОбновитьСкладыВМониторинге(ДанныеСправочниковДляОбновления.ДанныеСкладовДляМониторинга, Настройки);
	
	// добавить маршруты
	ЯМ_МониторингКлиент.ОбновитьМаршрутыВМониторинге(ПолучитьДанныеМаршрутовДляМониторинга(), Настройки);
	
	// добавить точки доставки
	ЯМ_МониторингКлиент.ОбновитьТочкиДоставкиВМониторинге(ПолучитьДанныеТочекДоставкиДляМониторинга(), Настройки);		
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеСправочниковДляОбновления()
	
	ДанныеДляОбновления = Новый Структура;
	
	ДанныеДляОбновления.Вставить("ДанныеМашинДляМониторинга", 			ЯМ_МониторингСервер.ПолучитьДанныеМашинДляМониторинга());
	ДанныеДляОбновления.Вставить("ДанныеСкладовДляМониторинга", 		ЯМ_МониторингСервер.ПолучитьДанныеСкладовДляМониторинга());
	
	Возврат ДанныеДляОбновления;
	
КонецФункции

&НаКлиенте
Функция ПолучитьДанныеМаршрутовДляМониторинга() 
	
	МассивДанных = Новый Массив;
		
	Для Каждого Маршрут Из ТаблицаМаршрутов Цикл 
		// ДанныеМаршрута = Новый Структура("courier_id,courier_number,date,depot_id,depot_number,id,imei,number,route_finish,route_start");
		ДанныеМаршрута = Новый Структура("courier_number,date,depot_number,number");
		ЗаполнитьЗначенияСвойств(ДанныеМаршрута, Маршрут);
		//ДанныеМаршрута.Транспорт = 		
		МассивДанных.Добавить(ДанныеМаршрута);
	КонецЦикла;	
	
	Возврат МассивДанных;
	
КонецФункции

&НаКлиенте
Функция ПолучитьДанныеТочекДоставкиДляМониторинга() 
	
	МассивДанных = Новый Массив;
	
	Для Каждого ТочкаДоставки Из ТаблицаТочекДоставки Цикл
		Если НЕ ТочкаДоставки.ТипТочки = "location/delivery" Тогда 
			Продолжить;
		КонецЕсли;
		// ДанныеТочкиДоставки = Новый Структура("address,amount,comments,customer_id,
			//customer_name,customer_number,description,lat,lon,mark_delivered_radius,number,partner_id,
			//payment_type,phone,route_id,route_number,service_duration_s,shared_service_duration_s,shared_with_company_ids,status,time_interval,volume,weight");
		ДанныеТочкиДоставки = Новый Структура("address,amount,comments,customer_name,customer_number,description,lat,lon,mark_delivered_radius,number,phone,route_number,service_duration_s,shared_service_duration_s,status,time_interval,volume,weight");
		ЗаполнитьЗначенияСвойств(ДанныеТочкиДоставки, ТочкаДоставки);		
		МассивДанных.Добавить(ДанныеТочкиДоставки);
	КонецЦикла;	
	
	Возврат МассивДанных;
	
КонецФункции

&НаСервере
Функция ПолучитьДокументВЗависимостиОтКонфигурации(ДокументУИД)
	ДокументСсылка = Неопределено;
	
	Если Конфигурация = "БП" Тогда
		ДокументСсылка = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(Новый УникальныйИдентификатор(ДокументУИД));
	ИначеЕсли Конфигурация = "БИТУМЦ" Тогда
		//@skip-warning Работает только в определенных конфигурациях в которых есть этот документ
		ДокументСсылка = Документы.Заявка.ПолучитьСсылку(Новый УникальныйИдентификатор(ДокументУИД));
	Иначе
		//@skip-warning Работает только в определенных конфигурациях в которых есть этот документ
		ДокументСсылка = Документы.ЗаказПокупателя.ПолучитьСсылку(Новый УникальныйИдентификатор(ДокументУИД));
	КонецЕсли;
	
	Если ДокументСсылка.Номер = "           " Тогда
		ДокументСсылка = Документы.ЯМ_ЗаявкаНаДоставку.ПолучитьСсылку(Новый УникальныйИдентификатор(ДокументУИД));
	КонецЕсли;
	
	Возврат ДокументСсылка; 
КонецФункции

&НаСервере
Функция ПолучитьТекстЗапроса()
	Текст = "";
	
	Если Конфигурация = "БП" Тогда
		Текст = "ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
		|	РеализацияТоваровУслуг.Контрагент.Наименование КАК КонтрагентНаименование,
		|	РеализацияТоваровУслуг.АдресДоставки КАК address,
		|	ВЫРАЗИТЬ(РеализацияТоваровУслуг.Комментарий КАК СТРОКА(150)) КАК Комментарий,
		|	РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
		|	РеализацияТоваровУслуг.Контрагент.ИНН КАК КонтрагентИНН,
		|	РеализацияТоваровУслуг.Контрагент.КПП КАК КонтрагентКПП,
		|	0 КАК УпаковкаВес,
		|	0 КАК УпаковкаОбъем
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ПО РеализацияТоваровУслугТовары.Ссылка = РеализацияТоваровУслуг.Ссылка
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &Ссылка
		|СГРУППИРОВАТЬ ПО
		|	РеализацияТоваровУслуг.СуммаДокумента,
		|	РеализацияТоваровУслуг.Контрагент,
		|	РеализацияТоваровУслуг.АдресДоставки,
		|	ВЫРАЗИТЬ(РеализацияТоваровУслуг.Комментарий КАК СТРОКА(150)),
		|	РеализацияТоваровУслуг.Контрагент.Наименование,
		|	РеализацияТоваровУслуг.Контрагент.ИНН,
		|	РеализацияТоваровУслуг.Контрагент.КПП
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЯМ_ЗаявкаНаДоставку.Заказчик КАК Контрагент,
		|	ЯМ_ЗаявкаНаДоставку.Заказчик.Наименование КАК КонтрагентНаименование,
		|	ЯМ_ЗаявкаНаДоставку.Адрес КАК address,
		|	ВЫРАЗИТЬ(ЯМ_ЗаявкаНаДоставку.Комментарий КАК СТРОКА(150)) КАК Комментарий,
		|	0 КАК СуммаДокумента,
		|	ЯМ_ЗаявкаНаДоставку.Заказчик.ИНН КАК КонтрагентИНН,
		|	ЯМ_ЗаявкаНаДоставку.Заказчик.КПП КАК КонтрагентКПП,
		|	0 КАК УпаковкаВес,
		|	0 КАК УпаковкаОбъем
		|ИЗ
		|	Документ.ЯМ_ЗаявкаНаДоставку КАК ЯМ_ЗаявкаНаДоставку
		|ГДЕ
		|	ЯМ_ЗаявкаНаДоставку.Ссылка = &Ссылка";
	ИначеЕсли Конфигурация = "БИТУМЦ" Тогда
		Текст = "ВЫБРАТЬ
		|	Заявка.Клиент КАК Контрагент,
		|	Заявка.Клиент.Наименование КАК КонтрагентНаименование,
		|	Заявка.Адрес КАК address,
		|	Заявка.Телефон КАК phone,
		|	ВЫРАЗИТЬ(Заявка.Примечание КАК СТРОКА(150)) КАК Комментарий,
		|	Заявка.СуммаДокумента КАК СуммаДокумента,
		|	Заявка.Клиент.ИНН КАК КонтрагентИНН,
		|	"""" КАК КонтрагентКПП,
		|	0 КАК УпаковкаВес,
		|	0 КАК УпаковкаОбъем,
		|	Заявка.ВидУслуги КАК ВидУслуги,
		|	Заявка.СтраховаяКомпания.Наименование КАК СтраховаяКомпания,
		|	СУММА(ЗаявкаРаботы.Сумма) КАК Сумма
		|ИЗ
		|	Документ.Заявка.Работы КАК ЗаявкаРаботы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Заявка КАК Заявка
		|		ПО ЗаявкаРаботы.Ссылка = Заявка.Ссылка
		|ГДЕ
		|	Заявка.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	Заявка.СуммаДокумента,
		|	Заявка.Телефон,
		|	Заявка.Клиент,
		|	Заявка.Адрес,
		|	ВЫРАЗИТЬ(Заявка.Примечание КАК СТРОКА(150)),
		|	Заявка.Клиент.Наименование,
		|	Заявка.Клиент.ИНН,
		|	Заявка.ВидУслуги,
		|	Заявка.СтраховаяКомпания";
	Иначе
		Текст = "ВЫБРАТЬ
		|	ЗаказПокупателя.Контрагент КАК Контрагент,
		|	ЗаказПокупателя.Контрагент.Наименование КАК КонтрагентНаименование,
		|	ЗаказПокупателя.АдресДоставки КАК address,
		|	ВЫРАЗИТЬ(ЗаказПокупателя.Комментарий КАК СТРОКА(150)) КАК Комментарий,
		|	ЗаказПокупателя.СуммаДокумента КАК СуммаДокумента,
		|	ЗаказПокупателя.Контрагент.ИНН КАК КонтрагентИНН,
		|	ЗаказПокупателя.Контрагент.КПП КАК КонтрагентКПП,
		//|	ЕСТЬNULL(СУММА(РеализацияТоваровУслугТовары.Упаковка.Вес), 0) КАК УпаковкаВес,
		//|	ЕСТЬNULL(СУММА(РеализацияТоваровУслугТовары.Упаковка.Объем), 0) КАК УпаковкаОбъем
		|	0 КАК УпаковкаВес,
		|	0 КАК УпаковкаОбъем
		|ИЗ
		|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК Заявка
		|		ПО ЗаказПокупателяТовары.Ссылка = ЗаказПокупателя.Ссылка
		|ГДЕ
		|	ЗаказПокупателя.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказПокупателя.СуммаДокумента,
		|	ЗаказПокупателя.Контрагент,
		|	ЗаказПокупателя.АдресДоставки,
		|	ВЫРАЗИТЬ(ЗаказПокупателя.Комментарий КАК СТРОКА(150)),
		|	ЗаказПокупателя.Контрагент.Наименование,
		|	ЗаказПокупателя.Контрагент.ИНН,
		|	ЗаказПокупателя.Контрагент.КПП";
	КонецЕсли;
	
	Возврат Текст;
КонецФункции	
	
&НаСервере
Функция ПолучитьДополниеьльнуюИнформациюДляМониторинга(ДокументУИД)
	Запрос = Новый Запрос;
	
	ДокументСсылка = ПолучитьДокументВЗависимостиОтКонфигурации(ДокументУИД);	
	
	Запрос.Текст = ПолучитьТекстЗапроса();
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДопИнфо = Новый Структура();
	Пока Выборка.Следующий() Цикл 
		ДопИнфо.Вставить("amount", 			Выборка.СуммаДокумента);
		
		ДопИнфо.Вставить("customer_name", 	"" + Выборка.КонтрагентНаименование);
		ДопИнфо.Вставить("customer_number",	"" + Выборка.КонтрагентИНН + "/" + Выборка.КонтрагентКПП);
		
		Комментарий = Выборка.Комментарий;
		
		Если Конфигурация = "БИТУМЦ" Тогда
			ДопИнфо.Вставить("phone",		Выборка.phone);
			
			Если Выборка.ВидУслуги = 0 Тогда
				ДопИнфо.Вставить("Стоимость",Выборка.Сумма);
			Иначе
				ДопИнфо.Вставить("Стоимость",Выборка.СтраховаяКомпания);
			КонецЕсли;
		Иначе
			ДопИнфо.Вставить("phone", 			УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Выборка.Контрагент, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента,Дата(1,1,1)));
		КонецЕсли;
		
		Если Конфигурация = "БП" Тогда
			//Вынести в настройку ИскатьФактическийАдрес
			//to do: Вынести в настройку ИскатьФактическийАдрес
			АдресПолучателя = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Выборка.Контрагент, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
			Если ЗначениеЗаполнено(АдресПолучателя) Тогда
				ДопИнфо.Вставить("address", 		АдресПолучателя);
			Иначе
				ДопИнфо.Вставить("address", 		"" + Выборка.address);
			КонецЕсли;
		Иначе
			ДопИнфо.Вставить("address", 			"" + Выборка.address);
		КонецЕсли;
		
		ДопИнфо.Вставить("comments", 		Комментарий);
		ДопИнфо.Вставить("volume", 			Выборка.УпаковкаОбъем);
		ДопИнфо.Вставить("weight", 			Выборка.УпаковкаВес);
		
		Если Настройки.Свойство("УчетЛотков") И Настройки.УчетЛотков Тогда
			КоличествоТоваров = ЯМ_МаршрутизацияСервер.ПолучитьКоличествоМест(ДокументСсылка);
		Иначе
			КоличествоТоваров = ДокументСсылка.Товары.Итог("Количество");
		КонецЕсли;
		
		ДопИнфо.Вставить("КоличествоТоваров",КоличествоТоваров);
	КонецЦикла;
	
	Возврат ДопИнфо;
	
КонецФункции

&НаКлиенте
Процедура ПерейтиВИнтерфейсМаршрутизации(Команда)
	
	// https://yandex.ru/courier/companies/<id компании>/depots/all/mvrp/<id задачи>
	ЗапуститьПриложение("https://yandex.ru/courier/companies/" + Настройки.idКомпании + "/depots/all/mvrp/" + idПланирования);
	
КонецПроцедуры

&НаКлиенте
Процедура idПланированияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОткрытьФорму(
			"Обработка.Yandex.Форма.ФормаВыбораРезультатаПланирования", 
			Новый Структура("ЗакрыватьПриВыборе, РежимВыбора", 
				Истина, Истина), 
				ЭтаФорма
				, , , ,
				Новый ОписаниеОповещения("ПриЗакрытииФормыВыбора", ЭтаФорма), 
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
		
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииФормыВыбора(Результат, ДопПараметры) Экспорт 
	
	Если НЕ Результат = Неопределено Тогда 
		idПланирования = Результат;
		ПоказатьРезультатыПланирования(idПланирования);
	КонецЕсли;
	СсылкаНаПланированиеЗаполнениеИВидимость();
КонецПроцедуры

&НаКлиенте
Функция ПреобразоватьВремя(СекундыВходящие)
	Часов	= Цел(СекундыВходящие / 3600);
	Минут	= Цел((СекундыВходящие - Часов * 3600) / 60);
	Секунд	= СекундыВходящие - Часов * 3600 - Минут * 60;
	СтрокаВремениВыполнения = "" + Часов + ":" + ?(Минут = 0, "00", Формат(Минут, "ЧЦ=2; ЧДЦ=0; ЧВН=")) + ":" + ?(Секунд = 0, "00", Формат(Секунд, "ЧЦ=2; ЧВН="));
	
	Возврат СтрокаВремениВыполнения;
КонецФункции

&НаКлиенте
Функция ПопыткаПеревестиПричинуНаРусский(Причина)
	Причина = СтрЗаменить(Причина,"not compatible vehicles:","Не найден подходящий транспорт:");
	Причина = СтрЗаменить(Причина,"does not have tags required for the location","нет подходящих свойств автомобиля");
	Причина = СтрЗаменить(Причина,"Hard time window failed: expected lateness is ",
												"Окно жесткого времени не удалось: ожидаемое опоздание составляет ");
	Причина = СтрЗаменить(Причина,"Drop reasons (for different vehicles):",
																"Причины падения (для разных транспортных средств):");
	Причина = СтрЗаменить(Причина,"Not enough time to visit location (hard time window failed):",
	"Недостаточно времени для посещения места (окно жесткого времени не удалось):");
	Причина = СтрЗаменить(Причина,"vehicle id ","транспорт ");
	Причина = СтрЗаменить(Причина,"vehicles","транспортных средств");
	Причина = СтрЗаменить(Причина," seconds"," секунды");
	 
	Возврат Причина;
КонецФункции

&НаКлиенте
Процедура ПоказатьРезультатыПланирования(ЗадачаID)
	
	// Для дополнительной информации при доработках запросов необходимо обращаться 
	// к инструкциям по адресу https://yandex.ru/routing/doc/vrp/
	НеЗапланированныеЗаказы.Очистить();
	ТаблицаМаршрутов.Очистить();
	ТаблицаТочекДоставки.Очистить();
	Адрес = Настройки.АдресЗапросаРезультата + ЗадачаID;
	Ответ = ПоказатьРезультатыПланированияНаСервере(Адрес);
	
	КодСостояния = Ответ.КодСостояния;
	
	Если НЕ Ответ.HTTPОтвет Тогда 
		
		Сообщить("Ощибка формирования запроса! Код ошибки " + Строка(КодСостояния) + "  
		|Информация о структуре запросов и их примеры в инструкции https://yandex.ru/routing/doc/vrp/");
		
	Иначе
		Результат = Ответ.Результат;
		
		Если Результат.Свойство("result") Тогда

			Элементы.ДекорацияСообщение.Видимость = Ложь;
			
			Если Результат.result.dropped_locations.Количество() > 0 Тогда 
				
				Для Каждого Стр Из Результат.result.dropped_locations Цикл
					НстрНЗЗ = НеЗапланированныеЗаказы.Добавить();
					НстрНЗЗ.Адрес	= Стр.description;
					НстрНЗЗ.Причина	= ПопыткаПеревестиПричинуНаРусский(Стр.drop_reason);
					НстрНЗЗ.Документ = ПолучитьДокументВЗависимостиОтКонфигурации(Стр.id);
					НстрНЗЗ.title = Стр.title;
				КонецЦикла;
				
				Сообщить("Не запланированных точек доставки: " + Строка(Результат.result.dropped_locations.Количество()));
			КонецЕсли;
			РезультатПланирования = Результат.result;
			
			date = РезультатПланирования.options.date;
			ДатаРезультатов = Дата(СтрЗаменить(date, "-", ""));
			Маршруты = РезультатПланирования.routes;
			Для Каждого Маршрут Из Маршруты Цикл
				
				//{
				//"car_id": integer,
				//"courier_id": integer,
				//"courier_number": string,
				//"date": string,
				//"depot_id": integer,
				//"depot_number": string,
				//"id": integer,
				//"imei": integer,
				//"number": string,
				//"route_finish": string,
				//"route_start": string
				//}
				
				НоваяСтрокаМаршруты = ТаблицаМаршрутов.Добавить();
				НоваяСтрокаМаршруты.courier_number	= Маршрут.vehicle_id;
				НоваяСтрокаМаршруты.Транспорт		= ПолучитьТранспортПоИД(НоваяСтрокаМаршруты.courier_number);
				НоваяСтрокаМаршруты.date = date;
				//НоваяСтрока.depot_id = ;
				//НоваяСтрока.id = ;
				//НоваяСтрока.imei = ;
				НоваяСтрокаМаршруты.number 			= Маршрут.vehicle_id + "-" + Маршрут.run_number + "-" + date;
				НоваяСтрокаМаршруты.route_finish	= ПреобразоватьВремя(Маршрут.shift.end.departure_time_s);
				НоваяСтрокаМаршруты.route_start 	= ПреобразоватьВремя(Маршрут.shift.start.arrival_time_s);
				НоваяСтрокаМаршруты.run_number 					= Маршрут.run_number;
				НоваяСтрокаМаршруты.total_duration_s 			= ПреобразоватьВремя(Маршрут.metrics.total_duration_s);
				НоваяСтрокаМаршруты.total_transit_distance_m 	= Маршрут.metrics.total_transit_distance_m / 1000;
				НоваяСтрокаМаршруты.total_stops 				= Маршрут.metrics.total_stops;
				НоваяСтрокаМаршруты.start_adress				= Маршрут.shift.start.node.value.ref;
				НоваяСтрокаМаршруты.finish_adress				= Маршрут.shift.end.node.value.ref;
				
				ТочкиДоставки = Маршрут.route;
				depot_number = Неопределено;
				КоличествоТоваров = 0;
				Для Каждого ТочкаДоставки ИЗ ТочкиДоставки Цикл 
					//{
					//"address": string,
					//"amount": number,
					//"comments": string,
					//"customer_id": integer,
					//"customer_name": string,
					//"customer_number": string,
					//"description": string,
					//"lat": number,
					//"lon": number,
					//"mark_delivered_radius": number,
					//"number": string,
					//"partner_id": integer,
					//"payment_type": string,
					//"phone": string,
					//"route_id": integer,
					//"route_number": string,
					//"service_duration_s": integer,
					//"shared_service_duration_s": integer,
					//"shared_with_company_id": integer,
					//	"shared_with_company_ids": [
					//	number
					//	],
					//"status": string,
					//"time_interval": string,
					//"volume": number,
					//"weight": number
					//}
					
					НовСтрТочкиДоставки							= ТаблицаТочекДоставки.Добавить();
					НовСтрТочкиДоставки.Транспорт				= НоваяСтрокаМаршруты.Транспорт;
					НовСтрТочкиДоставки.Машина 					= Маршрут.vehicle_id;
					НовСтрТочкиДоставки.Рейс 					= Маршрут.run_number;
					НовСтрТочкиДоставки.ТочкаМаршрута 			= ТочкаДоставки.node.value.ref;
					НовСтрТочкиДоставки.ТипТочки 				= ТочкаДоставки.node.type;
					НовСтрТочкиДоставки.ВремяПрибытия 			= Строка(ДатаРезультатов + 
																						ТочкаДоставки.arrival_time_s);
					НовСтрТочкиДоставки.lat 					= ТочкаДоставки.node.value.point.lat;
					НовСтрТочкиДоставки.lon 					= ТочкаДоставки.node.value.point.lon;
					НовСтрТочкиДоставки.mark_delivered_radius	= Настройки.mark_delivered_radius;
					
					Если ТочкаДоставки.node.type = "depot" И depot_number = Неопределено Тогда  
						depot_number = ТочкаДоставки.node.value.id;
					КонецЕсли;
					Если (ТочкаДоставки.node.value.Свойство("type") 
							И ТочкаДоставки.node.value.type = "garage")
							ИЛИ ТочкаДоставки.node.type = "depot" Тогда 
						Продолжить;
					КонецЕсли;
					
					НовСтрТочкиДоставки.ДопИнфо = ТочкаДоставки.node.value.id;
					ДопИнфо = ПолучитьДополниеьльнуюИнформациюДляМониторинга(ТочкаДоставки.node.value.id);		
					НовСтрТочкиДоставки.ТипТочки = НовСтрТочкиДоставки.ТипТочки + 
						?(ЗначениеЗаполнено(ТочкаДоставки.node.value.type), "/" + ТочкаДоставки.node.value.type, "");
					
					НовСтрТочкиДоставки.address				= ДопИнфо.address;
					НовСтрТочкиДоставки.amount				= ДопИнфо.amount;
					НовСтрТочкиДоставки.comments			= ДопИнфо.comments;
					НовСтрТочкиДоставки.customer_name 		= ДопИнфо.customer_name;
					НовСтрТочкиДоставки.customer_number		= ДопИнфо.customer_number;
					НовСтрТочкиДоставки.description			= ТочкаДоставки.node.value.ref + " " + 
																								ДопИнфо.customer_name;
					НовСтрТочкиДоставки.status				= Настройки.СтатусЗаказаПоУмолчанию;
					НовСтрТочкиДоставки.time_interval		= ТочкаДоставки.node.value.time_window;
					НовСтрТочкиДоставки.volume				= ДопИнфо.volume;
					НовСтрТочкиДоставки.weight				= ТочкаДоставки.node.value.shipment_size.weight_kg;
					НовСтрТочкиДоставки.number				= ТочкаДоставки.node.value.ref;
					НовСтрТочкиДоставки.phone				= ДопИнфо.phone;
					НовСтрТочкиДоставки.route_number		= НоваяСтрокаМаршруты.number;
					
					Если Настройки.Свойство("РасчетВМинутах") И Настройки.РасчетВМинутах Тогда
						КратностьВремени = 60;
					Иначе
						КратностьВремени = 1;
					КонецЕсли;
					НовСтрТочкиДоставки.service_duration_s	= ТочкаДоставки.node.value.service_duration_s / КратностьВремени;
					НовСтрТочкиДоставки.shared_service_duration_s = ТочкаДоставки.node.value.shared_service_duration_s / КратностьВремени;
					//НовСтрТочкиДоставки.customer_id = ;
					//НовСтрТочкиДоставки.partner_id = ;
					//НовСтрТочкиДоставки.payment_type = ;
					//НовСтрТочкиДоставки.route_id = ;
					//НовСтрТочкиДоставки.shared_with_company_ids = ;
					
					КоличествоТоваров = КоличествоТоваров + ДопИнфо.КоличествоТоваров;
				КонецЦикла;
				НоваяСтрокаМаршруты.КоличествоТоваров	= КоличествоТоваров;
				НоваяСтрокаМаршруты.depot_number		= depot_number;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Функция ПолучитьТранспортПоИД(ЛогинКурьера)
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЯМ_ТранспортныеСредства.Ссылка КАК ТранспортноеСредство
	|ИЗ
	|	Справочник.ЯМ_ТранспортныеСредства КАК ЯМ_ТранспортныеСредства
	|ГДЕ
	|	НЕ ЯМ_ТранспортныеСредства.ПометкаУдаления
	|	И ЯМ_ТранспортныеСредства.ЛогинКурьера = &ЛогинКурьера");
	Запрос.УстановитьПараметр("ЛогинКурьера",ЛогинКурьера);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Справочники.ЯМ_ТранспортныеСредства.ПустаяСсылка();
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ТранспортноеСредство;
	КонецЕсли;
		
КонецФункции

&НаСервере
Функция ПоказатьРезультатыПланированияНаСервере(Адрес)
	Соединение = Новый HTTPСоединение(Настройки.АдресСервисаМаршрутизация,,,
			,Новый ИнтернетПрокси(Истина)
			,
			,Новый ЗащищенноеСоединениеOpenSSL);

	Запрос = Новый HTTPЗапрос(Адрес);
	Запрос.Заголовки.Вставить("Content-Type",	"application/json");
	Запрос.Заголовки.Вставить("Accept",			"application/json");
	
	Ответ = Соединение.Получить(Запрос);
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("КодСостояния",Ответ.КодСостояния);
	
	Если ТипЗнч(Ответ) = Тип("HTTPОтвет") Тогда 
		СтруктураОтвета.Вставить("HTTPОтвет",Истина);
		
		Чтение = Новый ЧтениеJSON;
		ОтветСтрокой = Ответ.ПолучитьТелоКакСтроку(); 
		Чтение.УстановитьСтроку(ОтветСтрокой);
		Результат = ПрочитатьJSON(Чтение);
		СтруктураОтвета.Вставить("Результат",Результат);
	Иначе		
		СтруктураОтвета.Вставить("HTTPОтвет",Ложь);
		СтруктураОтвета.Вставить("Результат","");
	КонецЕсли;	
	
	Возврат СтруктураОтвета;
КонецФункции

&НаКлиенте
Процедура ОбновитьРезультаты(Команда)

	ПоказатьРезультатыПланирования(idПланирования);
	
КонецПроцедуры

&НаКлиенте
Процедура idПланированияПриИзменении(Элемент)
	Элементы.ДекорацияСообщение.Видимость = Ложь;
	ПоказатьРезультатыПланирования(idПланирования);
	СсылкаНаПланированиеЗаполнениеИВидимость();
КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаПланированиеЗаполнениеИВидимость()
	СсылкаНаПланирование = "https://yandex.ru/courier/companies/";
	Если ЗначениеЗаполнено(Настройки.idКомпании) Тогда
		СсылкаНаПланирование = СсылкаНаПланирование + Настройки.idКомпании + "/depots/all/mvrp/";
	Иначе
		СсылкаНаПланирование = СсылкаНаПланирование + "depots/all/mvrp/";
	КонецЕсли;
	СсылкаНаПланирование = СсылкаНаПланирование + idПланирования; 
	Элементы.СсылкаНаПланирование.Видимость = ЗначениеЗаполнено(idПланирования);
КонецПроцедуры

&НаКлиенте
Процедура idПланированияОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЗапуститьПриложение("https://yandex.ru/courier/companies/" + 
														Настройки.idКомпании + "/depots/all/mvrp/" + idПланирования);
КонецПроцедуры

&НаКлиенте
Процедура ТранспортныеСредстваВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СсылкаНаЭлементСправочника = Элемент.ТекущиеДанные.ТранспортноеСредство;
	ПараметрыФормы = Новый Структура("Ключ", СсылкаНаЭлементСправочника);
	ОткрытьФорму("Справочник.ЯМ_ТранспортныеСредства.ФормаОбъекта", ПараметрыФормы);	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаМаршрутовПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборСтрокРезультатов();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборСтрокРезультатов()
	
	Если НЕ Элементы.ТаблицаМаршрутов.ТекущаяСтрока = Неопределено И ОтборПоНомеруМашиныИРейсу Тогда 
		Элементы.ТаблицаТочекДоставки.ОтборСтрок = Новый ФиксированнаяСтруктура("Машина, Рейс", Элементы.ТаблицаМаршрутов.ТекущиеДанные.courier_number, Элементы.ТаблицаМаршрутов.ТекущиеДанные.run_number);
	Иначе
		Элементы.ТаблицаТочекДоставки.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоНомеруМашиныИРейсуПриИзменении(Элемент)
	
	УстановитьОтборСтрокРезультатов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПечтьМаршрутныйЛист(Команда)
	спРежим = Новый СписокЗначений;
	спРежим.Добавить("Список");
	спРежим.Добавить("Производство");
	
	Если ТаблицаМаршрутов.Количество() Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Какой маршрутный лист показать?';"
		+ " en = 'What itinerary should I show?'"), спРежим, 0);	
	Иначе
		ПоказатьПредупреждение(,"Необходимо выбрать планирование для печать маршрутного листа");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	Если Результат = "Список" Тогда
		ТабДок = Новый ТабличныйДокумент;	
		ТабДок = ЗаполнитьТабличныйДокументПоДаннымОбъекта(ТабДок);
		
		ТабДок.ТолькоПросмотр = Истина;
		ТабДок.ОтображатьЗаголовки = Истина;
		ТабДок.ОтображатьСетку = Ложь;
		ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		ТабДок.Показать();
	ИначеЕсли Результат = "Производство" Тогда
		ТабДок = Новый ТабличныйДокумент;	
		ТабДок = ЗаполнитьПоСКД(ТабДок);
		
		ТабДок.ТолькоПросмотр = Истина;
		ТабДок.ОтображатьЗаголовки = Истина;
		ТабДок.ОтображатьСетку = Ложь;
		ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ТабДок.Показать();	
	Иначе
		Сообщить("Тип не выбран!");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьПоСКД(ТабличныйДокумент)
 	ТабДок = ТабличныйДокумент;	
	
	Если ОтборПоНомеруМашиныИРейсу Тогда
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить("Машина",Элементы.ТаблицаМаршрутов.ТекущиеДанные.courier_number);
		ПараметрыОтбора.Вставить("Рейс",Элементы.ТаблицаМаршрутов.ТекущиеДанные.run_number);
		
		ТабДок = СформироватьМаршрутныйЛистСКД(ТабДок,ПараметрыОтбора);
	Иначе
		Для Каждого тМаршрут Из ТаблицаМаршрутов Цикл
			ПараметрыОтбора = Новый Структура();
			ПараметрыОтбора.Вставить("Машина",тМаршрут.courier_number);
			ПараметрыОтбора.Вставить("Рейс",тМаршрут.run_number);
			ТабДок = СформироватьМаршрутныйЛистСКД(ТабДок,ПараметрыОтбора);
		КонецЦикла;			
	КонецЕсли;
	
	Возврат ТабДок;
КонецФункции

&НаСервере
Функция СформироватьМаршрутныйЛистСКД(ТабДок,ПараметрыОтбора)
	
	МассивСсылок = Новый Массив;
		
	Для Каждого СтрТочек Из ТаблицаТочекДоставки Цикл
		Если СтрТочек.Машина = ПараметрыОтбора.Машина И СтрТочек.Рейс = ПараметрыОтбора.Рейс Тогда
			Если ЗначениеЗаполнено(СтрТочек.ДопИнфо) Тогда
				МассивСсылок.Добавить(ПолучитьДокументВЗависимостиОтКонфигурации(СтрТочек.ДопИнфо));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	//Получаем схему из макета
	СхемаКомпоновкиДанных = Отчеты.ЯМ_Маршруты.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	//Из схемы возьмем настройки по умолчанию
	НастройкиОтчета = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	НастройкиОтчета.ПараметрыДанных.Элементы[0].Значение = МассивСсылок;
	НастройкиОтчета.ПараметрыВывода.Элементы.Найти("ВыводитьЗаголовок").Использование = Истина;
    НастройкиОтчета.ПараметрыВывода.Элементы.Найти("ВыводитьЗаголовок").Значение      = ТипВыводаТекстаКомпоновкиДанных.Выводить; 
    НастройкиОтчета.ПараметрыВывода.Элементы.Найти("Заголовок").Использование         = Истина;
    НастройкиОтчета.ПараметрыВывода.Элементы.Найти("Заголовок").Значение              = ПараметрыОтбора.Машина;
	
	//Помещаем в переменную данные о расшифровке данных
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	//Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	//Передаем в макет компоновки схему, настройки и данные расшифровки
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
	
	//Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
	
	//Очищаем поле табличного документа
	//Результат = ЭлементыФормы.Результат;
	//Результат.Очистить();
	
	//Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабДок);
	ПроцессорВывода.НачатьВывод();
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	ПроцессорВывода.ЗакончитьВывод();
	
	ТабДок.АвтоМасштаб			= Истина;
	ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
	
	Возврат ТабДок;
КонецФункции
	
&НаКлиенте
Функция ЗаполнитьТабличныйДокументПоДаннымОбъекта(ТабличныйДокумент)
	ТабДок = ТабличныйДокумент;
	Если ОтборПоНомеруМашиныИРейсу Тогда
		Если Элементы.ТаблицаМаршрутов.ТекущиеДанные = Неопределено Тогда
			Возврат ТабДок;
		КонецЕсли;
		тМаршрут = Элементы.ТаблицаМаршрутов.ТекущиеДанные;
		ТабДок = СформироватьМаршрутныйЛистПоМаршруту(ТабДок,СборкаСтруктурыПараметровПечати(тМаршрут));
	Иначе
		Для Каждого тМаршрут Из ТаблицаМаршрутов Цикл
			ТабДок = СформироватьМаршрутныйЛистПоМаршруту(ТабДок,СборкаСтруктурыПараметровПечати(тМаршрут));
		КонецЦикла;			
	КонецЕсли;
	
	Возврат ТабДок;
КонецФункции

&НаКлиенте
Функция СборкаСтруктурыПараметровПечати(СтрокаМаршрут)
	date = Прав(СтрокаМаршрут.date,2) + "-" + Сред(СтрокаМаршрут.date,6,2) + "-" + Лев(СтрокаМаршрут.date,4);
	СтруктураЗаполнения = Новый Структура;
	СтруктураЗаполнения.Вставить("Машина",СтрокаМаршрут.courier_number);
	СтруктураЗаполнения.Вставить("Рейс",СтрокаМаршрут.run_number);
	СтруктураЗаполнения.Вставить("date",date);
	СтруктураЗаполнения.Вставить("route_start",СтрокаМаршрут.route_start);
	СтруктураЗаполнения.Вставить("route_finish",СтрокаМаршрут.route_finish);
	СтруктураЗаполнения.Вставить("start_adress",СтрокаМаршрут.start_adress);
	СтруктураЗаполнения.Вставить("finish_adress",СтрокаМаршрут.finish_adress);
	СтруктураЗаполнения.Вставить("total_transit_distance_m",СтрокаМаршрут.total_transit_distance_m);
	СтруктураЗаполнения.Вставить("courier_number",СтрокаМаршрут.courier_number);
	СтруктураЗаполнения.Вставить("ВремяРаботы",СтрокаМаршрут.total_duration_s);
	СтруктураЗаполнения.Вставить("Исполнитель","");
	СтруктураЗаполнения.Вставить("Водитель","");
	
	Возврат СтруктураЗаполнения;
КонецФункции

&НаСервере
Функция СформироватьМаршрутныйЛистПоМаршруту(ТабДок,СтруктураЗаполнения)
	Макет = Обработки.Yandex.ПолучитьМакет("МаршрутныйЛист");
	
	Машина	= СтруктураЗаполнения.Машина;
	Рейс	= СтруктураЗаполнения.Рейс;
	
	Если Конфигурация = "БИТУМЦ" Тогда
		ИмяШапки = "ШапкаБит";
		СтрокаТабИмя	= "СтрокаТабБит";
	Иначе
		ИмяШапки		= "Шапка";
		СтрокаТабИмя	= "СтрокаТаб";
	КонецЕсли;
	
	ТабДок = ПолучитьОбластьНаСервере(ТабДок,Макет,ИмяШапки,СтруктураЗаполнения);
	
	НПП = 0;
	Для Каждого СтрТочек Из ТаблицаТочекДоставки Цикл
		Если СтрТочек.Машина = Машина И СтрТочек.Рейс = Рейс Тогда
			НПП = НПП + 1;
			
			Если СтрТочек.ТипТочки = "depot" Тогда
				Если Конфигурация = "БИТУМЦ" Тогда
					НПП = НПП - 1;
					Продолжить;
				КонецЕсли;
				СтруктураЗаполнения = Новый Структура;
				СтруктураЗаполнения.Вставить("ТипТочки","Точка старта");
			ИначеЕсли СтрТочек.ТипТочки = "location" Тогда
				СтруктураЗаполнения = Новый Структура;
				СтруктураЗаполнения.Вставить("ТипТочки","Точка старта\Финиша");      
			Иначе	
				СтруктураЗаполнения = ПолучитьДополниеьльнуюИнформациюДляМониторинга(СтрТочек.ДопИнфо);
				СтруктураЗаполнения.Вставить("ТипТочки","Заявка");
			КонецЕсли;
			СтруктураЗаполнения.Вставить("НПП",НПП);
			СтруктураЗаполнения.Вставить("ФИО",СтрТочек.customer_name);	
			
			ТабДок = ПолучитьОбластьНаСервере(ТабДок,Макет,СтрокаТабИмя,СтруктураЗаполнения);
		КонецЕсли;
	КонецЦикла;
	
	ТабДок = ПолучитьОбластьНаСервере(ТабДок,Макет,"Подвал",Новый Структура);
	ТабДок = ДобавитьРазделитель(ТабДок);
	
	Возврат ТабДок;
КонецФункции

&НаСервере
Функция ДобавитьРазделитель(ТабДок)
	ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
	Возврат ТабДок;
КонецФункции

&НаСервере
Функция ПолучитьОбластьНаСервере(ТабДок,Макет,ИмяОбласти,ДанныеЗаполнения)
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Область.Параметры.Заполнить(ДанныеЗаполнения);
	
	ТабДок.Вывести(Область);
	Возврат ТабДок;
КонецФункции

&НаСервере
Процедура ЗаписатьКомментНаСервере(ИД,Коммент,Ссылка)
	Если ЗначениеЗаполнено(ИД) Тогда
		Док = ПолучитьДокументВЗависимостиОтКонфигурации(ИД);
	Иначе
		Док = Ссылка;
	КонецЕсли;
	Д = Док.ПолучитьОбъект();
	Д.Комментарий = Коммент;
	Д.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТочекДоставкиcommentsПриИзменении(Элемент)
	ТекСтрока = Элементы.ТаблицаТочекДоставки.ТекущиеДанные;
	ЗаписатьКомментНаСервере(ТекСтрока.ДопИнфо,ТекСтрока.comments,"");
КонецПроцедуры

&НаКлиенте
Процедура ДанныеЗаказовКомментарийПриИзменении(Элемент)
	ТекСтрока = Элементы.ДанныеЗаказов.ТекущиеДанные;
	ЗаписатьКомментНаСервере("",ТекСтрока.Комментарий,ТекСтрока.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ДанныеЗаказовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ДанныеЗаказовНомерЗаказа" Тогда
		СтандартнаяОбработка = Ложь; 
		Документ = ЭтаФорма.Элементы.ДанныеЗаказов.ТекущиеДанные.Ссылка;
		П = Новый Структура("Ключ", Документ);
		ОткрытьФорму("Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента",П);
	КонецЕсли;
КонецПроцедуры
