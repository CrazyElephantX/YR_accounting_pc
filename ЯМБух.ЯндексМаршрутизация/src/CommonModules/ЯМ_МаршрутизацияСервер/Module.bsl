
Функция ПолучитьДанныеМашин(ТочкиДоставки, ТраспортныеСредства) Экспорт 
	// Для дополнительной информации при доработках запросов необходимо обращаться 
	// к инструкциям по адресу https://yandex.ru/routing/doc/vrp/
	
	id = ТочкиДоставки.Количество() + 1;
	
	Машины = Новый Массив;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЯМ_ТранспортныеСредства.Ссылка КАК Ссылка,
	|	ЯМ_ТранспортныеСредства.Наименование КАК ref,
	|	ЯМ_ТранспортныеСредства.ЛогинКурьера КАК id,
	|	ЯМ_ТранспортныеСредства.КоличествоМест КАК units,
	|	ЯМ_ТранспортныеСредства.Грузоподъемность КАК weight_kg,
	|	ЯМ_ТранспортныеСредства.Длина КАК depth_m,
	|	ЯМ_ТранспортныеСредства.Ширина КАК width_m,
	|	ЯМ_ТранспортныеСредства.Высота КАК height_m,
	|	ЯМ_ТранспортныеСредства.СтоимостьКМ КАК km,
	|	ЯМ_ТранспортныеСредства.СтоимостьЧас КАК hour,
	|	ЯМ_ТранспортныеСредства.СтоимостьФикс КАК fixed,
	|	ЯМ_ТранспортныеСредства.СтоимостьЗаРейс КАК run,
	|	ЯМ_ТранспортныеСредства.СтоимостьЗаЗаказ КАК location,
	|	ЯМ_ТранспортныеСредства.КоличествоРейсов КАК max_runs,
	|	ЯМ_ТранспортныеСредства.СтартНеНаСкладе КАК start_at,
	|	ЯМ_ТранспортныеСредства.ЗавершениеНеНаСкладе КАК finish_at,
	|	ЯМ_ТранспортныеСредства.СпособПеремещения КАК routing_mode,
	|	ЯМ_ТранспортныеСредства.ЗаехатьНаСкладВНачалеМаршрута КАК visit_depot_at_start,
	|	ЯМ_ТранспортныеСредства.ЗаехатьНаСкладВКонцеМаршрута КАК return_to_depot,
	|	ЯМ_ТранспортныеСредства.ШиротаТочкиСтарта КАК ШиротаТочкиСтарта,
	|	ЯМ_ТранспортныеСредства.ДолготаТочкиСтарта КАК ДолготаТочкиСтарта,
	|	ЯМ_ТранспортныеСредства.ШиротаТочкиЗавершения КАК ШиротаТочкиЗавершения,
	|	ЯМ_ТранспортныеСредства.ДолготаТочкиЗавершения КАК ДолготаТочкиЗавершения,
	|	ЯМ_ТранспортныеСредства.ВременноеОкноТочкаСтарта КАК ВременноеОкноТочкаСтарта,
	|	ЯМ_ТранспортныеСредства.ВременноеОкноТочкаОкончания КАК ВременноеОкноТочкаОкончания,
	|	ЯМ_ТранспортныеСредства.Теги.(
	|		Тег.Наименование КАК Тег
	|	) КАК Теги,
	|	ЯМ_ТранспортныеСредства.Смены.(
	|		НомерСтроки КАК id,
	|		ВременноеОкно КАК time_window,
	|		ЖесткоеВременноеОкно КАК hard_window,
	|		МинимальноеКоличествоСтопов КАК minimal_stops,
	|		МаксимальноеКоличествоСтопов КАК maximal_stops,
	|		Штрафы КАК Штрафы,
	|		МаксимальныйПробег КАК max_mileage_km,
	|		МаксимальнаяПродолжительностьСмены КАК max_duration_s,
	|		ГруппаБалансировки.Наименование КАК balanced_group_id
	|	) КАК Смены,
	|	ЯМ_ТранспортныеСредства.КорректировкаВремениДвиженияАвтомобиля КАК travel_time_multiplier
	|ИЗ
	|	Справочник.ЯМ_ТранспортныеСредства КАК ЯМ_ТранспортныеСредства
	|ГДЕ
	|	ЯМ_ТранспортныеСредства.Ссылка В(&ТраспортныеСредства)";
	Запрос.УстановитьПараметр("ТраспортныеСредства", ТраспортныеСредства);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда 
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл 
			
			Машина = Новый Структура("id, ref, return_to_depot, max_runs,travel_time_multiplier");
			ЗаполнитьЗначенияСвойств(Машина, Выборка);
			
			Если Машина.travel_time_multiplier = 0 Тогда
				Машина.travel_time_multiplier = 1;
			КонецЕсли;
		
			Если Выборка.visit_depot_at_start = Истина Тогда 
				Машина.Вставить("visit_depot_at_start", Выборка.visit_depot_at_start);	
			КонецЕсли;
			
			Машина.id = Строка(Выборка.id); // Строка(Выборка.Ссылка.УникальныйИдентификатор());
			
			Машина.Вставить("routing_mode", Метаданные.Перечисления[Выборка.routing_mode.Метаданные().Имя].ЗначенияПеречисления[Перечисления[Выборка.routing_mode.Метаданные().Имя].Индекс(Выборка.routing_mode)].Имя);
			
			Если Выборка.start_at И ЗначениеЗаполнено(Выборка.ШиротаТочкиСтарта) И ЗначениеЗаполнено(Выборка.ДолготаТочкиСтарта) Тогда
								
				ТочкаДоставки = Новый Структура();
				ТочкаДоставки.Вставить("id", Строка(id));
				ТочкаДоставки.Вставить("ref", "Старт " + Выборка.ref + " id " + Выборка.id);
				ТочкаДоставкиКоординаты = Новый Структура("lat, lon", Выборка.ШиротаТочкиСтарта, Выборка.ДолготаТочкиСтарта);
				ТочкаДоставки.Вставить("point", ТочкаДоставкиКоординаты);
				ТочкаДоставки.Вставить("time_window", ЯМ_СлужебныйСервер.ОбработатьВременноеОкно(Выборка.ВременноеОкноТочкаСтарта)); // "09:00:00-18:00:00");
				ТочкаДоставки.Вставить("type", "garage");
				ТочкиДоставки.Добавить(ТочкаДоставки);
				
				Машина.Вставить("start_at", Строка(id));	
				
				id = id + 1;
				
			КонецЕсли;
			
			Если Выборка.finish_at И ЗначениеЗаполнено(Выборка.ШиротаТочкиЗавершения) И ЗначениеЗаполнено(Выборка.ДолготаТочкиЗавершения) Тогда
								
				ТочкаДоставки = Новый Структура();
				ТочкаДоставки.Вставить("id", Строка(id));
				ТочкаДоставки.Вставить("ref", "Финиш " + Выборка.ref + " id " + Выборка.id);
				ТочкаДоставкиКоординаты = Новый Структура("lat, lon", Выборка.ШиротаТочкиЗавершения, Выборка.ДолготаТочкиЗавершения);
				ТочкаДоставки.Вставить("point", ТочкаДоставкиКоординаты);
				ТочкаДоставки.Вставить("time_window", ЯМ_СлужебныйСервер.ОбработатьВременноеОкно(Выборка.ВременноеОкноТочкаОкончания)); // "09:00:00-18:00:00");
				ТочкаДоставки.Вставить("type", "garage");
				ТочкиДоставки.Добавить(ТочкаДоставки);
				
				Машина.Вставить("finish_at", Строка(id));	
				
				id = id + 1;
				
			КонецЕсли;
			
			МашинаОбъем = Новый Структура("width_m, depth_m, height_m");
			ЗаполнитьЗначенияСвойств(МашинаОбъем, Выборка);
			МашинаТТХ = Новый Структура("units, weight_kg, volume");
			ЗаполнитьЗначенияСвойств(МашинаТТХ, Выборка);
			МашинаТТХ.Вставить("volume", МашинаОбъем);
			Машина.Вставить("capacity", МашинаТТХ);
			
			МашинаСтоимость = Новый Структура("km, hour, fixed, run, location");
			ЗаполнитьЗначенияСвойств(МашинаСтоимость, Выборка);
			Машина.Вставить("cost", МашинаСтоимость);			
			
			МассивТеговМашины = Новый Массив;
			ВыборкаТеги = Выборка.Теги.Выбрать();
			Пока ВыборкаТеги.Следующий() Цикл 
				МассивТеговМашины.Добавить(ВыборкаТеги.Тег);
			КонецЦикла;
			Машина.Вставить("tags", МассивТеговМашины);
			
			МассивСмены = Новый Массив;
			ВыборкаСмены = Выборка.Смены.Выбрать();
			Пока ВыборкаСмены.Следующий() Цикл 
				МашинаСмена = Новый Структура("id, time_window, hard_window"); // , max_mileage_km, max_duration_s"); // balanced_group_id");
				Если ЗначениеЗаполнено(ВыборкаСмены.balanced_group_id) Тогда 
					МашинаСмена.Вставить("balanced_group_id", ВыборкаСмены.balanced_group_id);
				КонецЕсли;
				Если ВыборкаСмены.minimal_stops > 0 Тогда 
					МашинаСмена.Вставить("minimal_stops", ВыборкаСмены.minimal_stops);
				КонецЕсли;
				Если ВыборкаСмены.maximal_stops > 0 Тогда 
					МашинаСмена.Вставить("maximal_stops", ВыборкаСмены.maximal_stops);
				КонецЕсли;
				Если ВыборкаСмены.max_mileage_km > 0 Тогда 
					МашинаСмена.Вставить("max_mileage_km", ВыборкаСмены.max_mileage_km);
				КонецЕсли;
				Если ВыборкаСмены.max_duration_s > 0 Тогда 
					МашинаСмена.Вставить("max_duration_s", ВыборкаСмены.max_duration_s);
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(МашинаСмена, ВыборкаСмены);
				МашинаСмена.time_window = ЯМ_СлужебныйСервер.ОбработатьВременноеОкно(МашинаСмена.time_window);
				МашинаСмена.id = Строка(МашинаСмена.id);
				Если ЗначениеЗаполнено(ВыборкаСмены.Штрафы) Тогда
					МашинаСмена.Вставить("penalty", СформироватьСтруктуруШтрафов(ВыборкаСмены.Штрафы));
				КонецЕсли;
				МассивСмены.Добавить(МашинаСмена);				
			КонецЦикла;
			Машина.Вставить("shifts", МассивСмены);
			Машины.Добавить(Машина);	
		КонецЦикла;
	КонецЕсли;
	
	Возврат Машины;
	
КонецФункции

Функция ПолучитьДанныеСклада(СкладПогрузки) Экспорт 
	
	// Для дополнительной информации при доработках запросов необходимо обращаться 
	// к инструкциям по адресу https://yandex.ru/routing/doc/vrp/
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЯМ_СкладыОтгрузки.Ссылка КАК Ссылка,
	|	ЯМ_СкладыОтгрузки.Наименование КАК ref,
	|	ЯМ_СкладыОтгрузки.Код КАК id,
	|	ЯМ_СкладыОтгрузки.Широта КАК lat,
	|	ЯМ_СкладыОтгрузки.Долгота КАК lon,
	|	ЯМ_СкладыОтгрузки.ВременноеОкно КАК time_window,
	|	ЯМ_СкладыОтгрузки.ЖесткоеВременноеОкно КАК hard_window,
	|	ЯМ_СкладыОтгрузки.Штрафы КАК Штрафы,
	|	ЯМ_СкладыОтгрузки.СервисноеВремяВНачалеРейса КАК service_duration_s,
	|	ЯМ_СкладыОтгрузки.СервисноеВремяВКонцеРейса КАК finish_service_duration_s,
	|	ЯМ_СкладыОтгрузки.ГибкоеВремяСтарта КАК flexible_start_time
	|ИЗ
	|	Справочник.ЯМ_СкладыОтгрузки КАК ЯМ_СкладыОтгрузки
	|ГДЕ
	|	ЯМ_СкладыОтгрузки.Ссылка = &Склад";
	Запрос.УстановитьПараметр("Склад", СкладПогрузки);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Склад = Новый Структура("id, ref, time_window, hard_window, service_duration_s, finish_service_duration_s, flexible_start_time");
			ЗаполнитьЗначенияСвойств(Склад, Выборка);
			Склад.time_window = ЯМ_СлужебныйСервер.ОбработатьВременноеОкно(Склад.time_window);
					
			СкладКоординаты = Новый Структура("lat, lon", Выборка.lat, Выборка.lon);
			Склад.Вставить("point", СкладКоординаты);
			Склад.Вставить("penalty", СформироватьСтруктуруШтрафов(Выборка.Штрафы));
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Склад;
	
КонецФункции

Функция ПолучитьДанныеТочекДоставки(ДанныеЗаказов) Экспорт 
	
	// Для дополнительной информации при доработках запросов необходимо обращаться 
	// к инструкциям по адресу https://yandex.ru/routing/doc/vrp/
	
	ТочкиДоставки = Новый Массив;
	
	Для Каждого ДанныеЗаказа Из ДанныеЗаказов Цикл		
		Если ДанныеЗаказа.Использовать Тогда
			ТочкаДоставки = Новый Структура();
			ТочкаДоставки.Вставить("id", Строка(ДанныеЗаказа.Ссылка.УникальныйИдентификатор()));
			ТочкаДоставки.Вставить("ref", ДанныеЗаказа.НомерЗаказа);
			ТочкаДоставкиКоординаты = Новый Структура("lat, lon", ДанныеЗаказа.Широта, ДанныеЗаказа.Долгота);
			ТочкаДоставки.Вставить("point", ТочкаДоставкиКоординаты);
			ТочкаДоставки.Вставить("time_window", ЯМ_СлужебныйСервер.ОбработатьВременноеОкно(ДанныеЗаказа.ВременноеОкно));// "09:00:00-18:00:00");
			ТочкаДоставки.Вставить("hard_window", ДанныеЗаказа.ЖесткоеВременноеОкно);
			ТочкаДоставкиПараметрыГруза = Новый Структура("weight_kg", ДанныеЗаказа.ВесБрутто);
			ТочкаДоставкиПараметрыГрузаОбъем = Новый Структура("depth_m, height_m, width_m", ДанныеЗаказа.Глубина, ДанныеЗаказа.Высота, ДанныеЗаказа.Ширина);
			ТочкаДоставкиПараметрыГруза.Вставить("volume", ТочкаДоставкиПараметрыГрузаОбъем);
			ТочкаДоставкиПараметрыГруза.Вставить("units", ДанныеЗаказа.КоличествоМест);
			ТочкаДоставки.Вставить("shipment_size", ТочкаДоставкиПараметрыГруза);
			ТочкаДоставки.Вставить("penalty", СформироватьСтруктуруШтрафов(ДанныеЗаказа.ШтрафыДляЗаказов));
			ТочкаДоставки.Вставить("shared_service_duration_s", ДанныеЗаказа.ВремяОбслуживанияАдрес);
			ТочкаДоставки.Вставить("service_duration_s", ДанныеЗаказа.ВремяОбслуживанияЗаказ);
			ТегиМашины = Новый Массив;
			Для Каждого ТегМашины Из ДанныеЗаказа.НеобходимыеСвойстваМашины Цикл 
				ТегиМашины.Добавить(ТегМашины.Значение);	
			КонецЦикла;
			ТочкаДоставки.Вставить("required_tags", ТегиМашины);
			ТочкаДоставки.Вставить("depot_duration_s", ДанныеЗаказа.ВремяЗагрузкиЗаказаНаСкладе);
			ТочкаДоставки.Вставить("type", ДанныеЗаказа.ТипЗаказа);
			ТочкаДоставки.Вставить("description", ДанныеЗаказа.АдресПолучателя);
			ТочкаДоставки.Вставить("title", ДанныеЗаказа.НаименованиеПолучателя);
			ТочкаДоставки.Вставить("phone",""); //to do: дописать заполнение телефона
			ТочкаДоставки.Вставить("comments",ДанныеЗаказа.Комментарий);
			//ТочкаДоставки.Вставить("depot_ready_time", Строка(ДанныеЗаказа.ВремяГотовностиЗаказа));	
			
			ТочкиДоставки.Добавить(ТочкаДоставки);
		КонецЕсли;
	КонецЦикла;
		
	Возврат ТочкиДоставки;
	
КонецФункции	

Процедура ЗаписатьДанныеЗапроса(id, Статус, Сообщение, Тип) Экспорт 
	
	Если Тип = "Ответ" Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ЯМ_ЗапросыНаМаршрутизацию.Период КАК Период,
		|	ЯМ_ЗапросыНаМаршрутизацию.id КАК id,
		|	ЯМ_ЗапросыНаМаршрутизацию.СтатусЗапроса КАК СтатусЗапроса,
		|	ЯМ_ЗапросыНаМаршрутизацию.Сообщение КАК Сообщение,
		|	ЯМ_ЗапросыНаМаршрутизацию.Тип КАК Тип
		|ИЗ
		|	РегистрСведений.ЯМ_ЗапросыНаМаршрутизацию КАК ЯМ_ЗапросыНаМаршрутизацию
		|ГДЕ
		|	ЯМ_ЗапросыНаМаршрутизацию.id = &id
		|	И ЯМ_ЗапросыНаМаршрутизацию.СтатусЗапроса = &СтатусЗапроса
		|	И ЯМ_ЗапросыНаМаршрутизацию.Сообщение = &Сообщение
		|	И ЯМ_ЗапросыНаМаршрутизацию.Тип = &Тип");
		
		
		Если Сообщение = "Task queued" Тогда 
			Статус = Перечисления.ЯМ_СтатусыЗапросов.Отправлен;
		ИначеЕсли Сообщение = "Task successfully completed" Тогда 
			Статус = Перечисления.ЯМ_СтатусыЗапросов.Завершен;
		ИначеЕсли Сообщение = "Task started and available for polling" Тогда 
			Статус = Перечисления.ЯМ_СтатусыЗапросов.Запланирован;
		Иначе
			Статус = Перечисления.ЯМ_СтатусыЗапросов.Ошибка;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("id",id);
		Запрос.УстановитьПараметр("СтатусЗапроса",Статус);
		Запрос.УстановитьПараметр("Сообщение",Сообщение);
		Запрос.УстановитьПараметр("Тип",Тип);
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			Набор = РегистрыСведений.ЯМ_ЗапросыНаМаршрутизацию.СоздатьМенеджерЗаписи();
			Набор.Период = ТекущаяДатаСеанса();
			Набор.id = id;
			Набор.Сообщение = Сообщение;
			Набор.Тип = Тип;
			Набор.СтатусЗапроса = Статус;
			Набор.Записать();
		Иначе
			Выборка = Результат.Выбрать();
			Набор = РегистрыСведений.ЯМ_ЗапросыНаМаршрутизацию.СоздатьМенеджерЗаписи();
			Набор.Период = Выборка.Период;
			Набор.id = id;
			Набор.Сообщение = Сообщение;
			Набор.Тип = Тип;
			Если Сообщение = "Task queued" Тогда 
				Набор.СтатусЗапроса = Перечисления.ЯМ_СтатусыЗапросов.Отправлен;
			ИначеЕсли Сообщение = "Task successfully completed" Тогда 
				Набор.СтатусЗапроса = Перечисления.ЯМ_СтатусыЗапросов.Завершен;
			ИначеЕсли Сообщение = "Task started and available for polling" Тогда 
				Набор.СтатусЗапроса = Перечисления.ЯМ_СтатусыЗапросов.Запланирован;
			Иначе
				Набор.СтатусЗапроса = Перечисления.ЯМ_СтатусыЗапросов.Ошибка;
			КонецЕсли;
			Набор.Записать();
		КонецЕсли;
	Иначе
		Набор = РегистрыСведений.ЯМ_ЗапросыНаМаршрутизацию.СоздатьМенеджерЗаписи();
		Набор.Период = ТекущаяДатаСеанса();
		Набор.id = id;
		Набор.Сообщение = Сообщение;
		Набор.Тип = Тип;
		Если Сообщение = "Task queued" Тогда 
			Набор.СтатусЗапроса = Перечисления.ЯМ_СтатусыЗапросов.Отправлен;
		ИначеЕсли Сообщение = "Task successfully completed" Тогда 
			Набор.СтатусЗапроса = Перечисления.ЯМ_СтатусыЗапросов.Завершен;
		ИначеЕсли Сообщение = "Task started and available for polling" Тогда 
			Набор.СтатусЗапроса = Перечисления.ЯМ_СтатусыЗапросов.Запланирован;
		Иначе
			Набор.СтатусЗапроса = Перечисления.ЯМ_СтатусыЗапросов.Ошибка;
		КонецЕсли;
		Набор.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьСтруктуруШтрафов(Штраф) Экспорт 
	
	Штрафы = Новый Структура;
	
	Штрафы_out_of_time		= Новый Структура();
	Штрафы_penalty_early	= Новый Структура();
	Штрафы_penalty_late		= Новый Структура();
	//Штрафы_penalty_drop		= Новый Структура();
	Штрафы_stop_excess		= Новый Структура();
	Штрафы_stop_lack		= Новый Структура();
	Штрафы_max_mileage		= Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЯМ_НастройкиШтрафовДляАлгоритмовСоставШтрафов.ВидШтрафа КАК ВидШтрафа,
	|	ЯМ_НастройкиШтрафовДляАлгоритмовСоставШтрафов.СуммаШтрафа КАК СуммаШтрафа
	|ИЗ
	|	Справочник.ЯМ_НастройкиШтрафовДляАлгоритмов.СоставШтрафов КАК ЯМ_НастройкиШтрафовДляАлгоритмовСоставШтрафов
	|ГДЕ
	|	ЯМ_НастройкиШтрафовДляАлгоритмовСоставШтрафов.Ссылка = &Штраф
	|	И НЕ ЯМ_НастройкиШтрафовДляАлгоритмовСоставШтрафов.СуммаШтрафа = ЗНАЧЕНИЕ(Перечисление.ЯМ_ШтрафНеЗаполнен.Пусто)";
	Запрос.УстановитьПараметр("Штраф", Штраф);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		// out_of_time
		Если Выборка.ВидШтрафа = Перечисления.ЯМ_ВидыШтрафов.out_of_time_fixed Тогда 
			Штрафы_out_of_time.Вставить("fixed", Выборка.СуммаШтрафа);
			Штрафы.Вставить("out_of_time", Штрафы_out_of_time);
		ИначеЕсли Выборка.ВидШтрафа = Перечисления.ЯМ_ВидыШтрафов.out_of_time_minute Тогда
			Штрафы_out_of_time.Вставить("minute", Выборка.СуммаШтрафа);
			Штрафы.Вставить("out_of_time", Штрафы_out_of_time);
		// early
		ИначеЕсли Выборка.ВидШтрафа = Перечисления.ЯМ_ВидыШтрафов.penalty_early_fixed Тогда
			Штрафы_penalty_early.Вставить("fixed", Выборка.СуммаШтрафа);
			Штрафы.Вставить("early", Штрафы_penalty_early);
		ИначеЕсли Выборка.ВидШтрафа = Перечисления.ЯМ_ВидыШтрафов.penalty_early_minute Тогда
			Штрафы_penalty_early.Вставить("minute", Выборка.СуммаШтрафа);
			Штрафы.Вставить("early", Штрафы_penalty_early);
		// late
		ИначеЕсли Выборка.ВидШтрафа = Перечисления.ЯМ_ВидыШтрафов.penalty_late_fixed Тогда
			Штрафы_penalty_late.Вставить("fixed", Выборка.СуммаШтрафа);
			Штрафы.Вставить("late", Штрафы_penalty_late);
		ИначеЕсли Выборка.ВидШтрафа = Перечисления.ЯМ_ВидыШтрафов.penalty_late_minute Тогда
			Штрафы_penalty_late.Вставить("minute", Выборка.СуммаШтрафа);
			Штрафы.Вставить("late", Штрафы_penalty_late);
		// drop
		ИначеЕсли Выборка.ВидШтрафа = Перечисления.ЯМ_ВидыШтрафов.penalty_drop Тогда
			Штрафы.Вставить("drop", Выборка.СуммаШтрафа);
		// stop_excess
		ИначеЕсли Выборка.ВидШтрафа = Перечисления.ЯМ_ВидыШтрафов.stop_excess_fixed Тогда
			Штрафы_stop_excess.Вставить("fixed", Выборка.СуммаШтрафа);
			Штрафы.Вставить("stop_excess", Штрафы_stop_excess);
		ИначеЕсли Выборка.ВидШтрафа = Перечисления.ЯМ_ВидыШтрафов.stop_excess_per_stop Тогда
			Штрафы_stop_excess.Вставить("per_stop", Выборка.СуммаШтрафа);
			Штрафы.Вставить("stop_excess", Штрафы_stop_excess);
		// stop_lack
		ИначеЕсли Выборка.ВидШтрафа = Перечисления.ЯМ_ВидыШтрафов.stop_lack_fixed Тогда
			Штрафы_stop_lack.Вставить("fixed", Выборка.СуммаШтрафа);
			Штрафы.Вставить("stop_lack", Штрафы_stop_lack);
		ИначеЕсли Выборка.ВидШтрафа = Перечисления.ЯМ_ВидыШтрафов.stop_lack_per_stop Тогда
			Штрафы_stop_lack.Вставить("per_stop", Выборка.СуммаШтрафа);
			Штрафы.Вставить("stop_lack", Штрафы_stop_lack);
		// max_mileage
		ИначеЕсли Выборка.ВидШтрафа = Перечисления.ЯМ_ВидыШтрафов.max_mileage_fixed Тогда
			Штрафы_max_mileage.Вставить("fixed", Выборка.СуммаШтрафа);
			Штрафы.Вставить("max_mileage", Штрафы_max_mileage);
		ИначеЕсли Выборка.ВидШтрафа = Перечисления.ЯМ_ВидыШтрафов.max_mileage_km Тогда
			Штрафы_max_mileage.Вставить("km", Выборка.СуммаШтрафа);
			Штрафы.Вставить("max_mileage", Штрафы_max_mileage);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Штрафы;

КонецФункции

Функция ЗаполнитьСписокЗаказов(ДатаНачала, ДатаОкончания, СкладОтгрузки, ДополнительныеПараметры) Экспорт 
	Конфигурация = ЯМ_СлужебныйСервер.ОпределитьКонфигурацию();
	ДанныеЗаказов = Новый Массив;
	
	Настройки = ЯМ_РаботаСНастройками.ПолучитьНастройкиМодуля();
	ПараметрыЗапроса = Новый Структура("Конфигурация",Конфигурация);
	ПараметрыЗапроса.Вставить("ДополнительныеПараметры",ДополнительныеПараметры);
	
	Запрос = Новый Запрос;
	Запрос.Текст = СформироватьТекстЗапросаВЗависимостиОтКонфигурации(ПараметрыЗапроса);
	Если Конфигурация = "БИТУМЦ" Тогда
		//@skip-warning есть только в конфигурации БИТ.Управление медицинским центром
		Причина = Справочники.ПричиныОбращения.НайтиПоКоду(Настройки.ЗаборАнализов);
		Запрос.УстановитьПараметр("ПричинаОбращения",Причина);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНачало", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончание", ДатаОкончания);
	Если ЗначениеЗаполнено(СкладОтгрузки.Склад) Тогда 
		Запрос.УстановитьПараметр("Склад", СкладОтгрузки.Склад);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЗаказКлиента.Склад = &Склад", "");
	КонецЕсли;
	Результат = Запрос.Выполнить();
	//Если Настройки.Свойство("ИскатьФактическийАдрес") И Настройки.ИскатьФактическийАдрес Тогда
	//	ИскатьФактическийАдрес
	//КонецЕсли;     Вынести в настройку
	//to do: Вынести в настройку ИскатьФактическийАдрес
	Если НЕ Результат.Пустой() Тогда 
				
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл 
			НоваяСтрока = Новый Структура("НомерСтроки,
						|НомерЗаказа,
						|Широта,
						|Использовать,
						|Долгота,
						|НаименованиеПолучателя,
						|АдресПолучателя,
						|ВременноеОкно,
						|ЖесткоеВременноеОкно,
						|ВремяОбслуживанияАдрес,
						|ВремяОбслуживанияЗаказ,
						|ВесБрутто,
						|КоличествоМест,
						|НеобходимыеСвойстваМашины,
						|Ширина,
						|Глубина,
						|Высота,
						|ШтрафыЗаМинуту,
						|ШтрафыЗаФактНарушенияОкнаДоставки,
						|ШтрафыЗаНедоставку,
						|ТипЗаказа,
						|ВремяЗагрузкиЗаказаНаСкладе,
						|Ссылка,
						|НомерСчета,
						|Комментарий,
						|Контрагент,
						|ТочностьГеокодирования");
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка,,"Ширина, Глубина, Высота");
			НоваяСтрока.Ширина = Выборка.Ширина * Выборка.Глубина * Выборка.Высота * Выборка.КоличествоМест;
			Если НоваяСтрока.Ширина > 0 Тогда 
				НоваяСтрока.Глубина = 1;
				НоваяСтрока.Высота = 1;
			Иначе
				НоваяСтрока.Глубина = 0;
				НоваяСтрока.Высота = 0;
			КонецЕсли;
						 			
			Если Настройки.Свойство("СпособУчета_КоличествоМест") И Настройки.СпособУчета_КоличествоМест = "Количество_Строк" Тогда
				НоваяСтрока.КоличествоМест = Выборка.КоличествоМестСтрок;
			КонецЕсли;
			
			Комментарий = НоваяСтрока.Комментарий;
			
			Если Конфигурация = "БП" Тогда 
				//to do: Вынести в настройку ИскатьФактическийАдрес
				//Вынести в настройку ИскатьФактическийАдрес
				АдресПолучателя = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Выборка.Контрагент,
															Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
				Если ЗначениеЗаполнено(АдресПолучателя) Тогда
					НоваяСтрока.АдресПолучателя = АдресПолучателя;
				КонецЕсли;
			ИначеЕсли Конфигурация = "БИТУМЦ" Тогда
				Если Выборка.ВидУслуги = 0 Тогда
					Комментарий = Комментарий + " Оплата: взять " + Формат(Выборка.Сумма,"ЧДЦ=2; ЧН=0") + " р.";
				Иначе
					Комментарий = Комментарий + " Оплата: " + Выборка.СтраховаяКомпания;
				КонецЕсли;
			ИначеЕсли Конфигурация = "УТ10" Тогда 	
				//@skip-warning работает только в ут10
				НоваяСтрока.АдресПолучателя = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Выборка.Контрагент, "Фактический");	
			КонецЕсли;
			НоваяСтрока.Комментарий = Комментарий;
			
			Если ЗначениеЗаполнено(Выборка.ВременноеОкноС) И ЗначениеЗаполнено(Выборка.ВременноеОкноПО) Тогда
				НоваяСтрока.ВременноеОкно = Формат(Выборка.ВременноеОкноС,"ДФ=ЧЧ:мм") + "-"
																		+ Формат(Выборка.ВременноеОкноПо,"ДФ=ЧЧ:мм");
			КонецЕсли;
				
			// координаты точек доставки должны быть взяты из учетной системы
			// либо сформированы геокодером по адресу точки доставки на стороне клиента
			// один из геокодеров - Яндекс: https://tech.yandex.ru/maps/geocoder/
			//
			// так как поля широты и долготы обязательны в структуре запроса,
			// для демонстрации работы они будут сгенерированы случайно рядом
			// с кооридинатами склада развоза
			
			/// ++ генерация случайных кооридинат по координатам склада
			Если Настройки.Свойство("ДемоКоординаты") И Настройки.ДемоКоординаты = Истина Тогда 
				ДанныеСклада = ПолучитьДанныеСклада(СкладОтгрузки);
				ШирСклада = Строка(Цел(ДанныеСклада.point.lat));
				ДолСклада = Строка(Цел(ДанныеСклада.point.lon));
				Шир = "";
				Для ИИ = 1 По 6 Цикл 
					УИД = Новый УникальныйИдентификатор;    
					ГСЧ = Новый ГенераторСлучайныхЧисел(КодСимвола(Лев(УИД,5)) + КодСимвола(Лев(УИД,4)));
					Ч = ГСЧ.СлучайноеЧисло(0, 9);
					Шир = Шир + Строка(Ч);
				КонецЦикла;
				НоваяСтрока.Широта = Число(ШирСклада + "." + Шир);
				Дол = "";
				Для ИИ = 1 По 6 Цикл
					УИД = Новый УникальныйИдентификатор;    
					ГСЧ = Новый ГенераторСлучайныхЧисел(КодСимвола(Лев(УИД,5)) + КодСимвола(Лев(УИД,4)));
					Ч = ГСЧ.СлучайноеЧисло(0, 9);
					Дол = Дол + Строка(Ч);
				КонецЦикла;
				НоваяСтрока.Долгота = Число(ДолСклада + "." + Дол);
			КонецЕсли;	
			/// --
			
			ДанныеЗаказов.Добавить(НоваяСтрока);
			
		КонецЦикла;	
		
	КонецЕсли;
	
	// Добавить Заявки
		
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЯМ_ЗаявкаНаДоставку.Номер КАК НомерЗаказа,
	|	ЯМ_ЗаявкаНаДоставку.Ссылка КАК Ссылка,
	|	ПОДСТРОКА(ЯМ_ЗаявкаНаДоставку.Комментарий, 1, 100) КАК Комментарий,
	|	ЯМ_ЗаявкаНаДоставку.Заказчик КАК Контрагент,
	|	ПОДСТРОКА(ЯМ_ЗаявкаНаДоставку.Заказчик.Наименование, 1, 200) КАК НаименованиеПолучателя,
	|	ЯМ_ЗаявкаНаДоставку.Адрес КАК АдресПолучателя,
	|	ЯМ_ЗаявкаНаДоставку.ВременноеОкноС КАК ВременноеОкноС,
	|	ЯМ_ЗаявкаНаДоставку.ВременноеОкноС КАК ВременноеОкноПо,
	|	0 КАК Ширина,
	|	0 КАК Высота,
	|	0 КАК Глубина,
	|	0 КАК ВесБрутто,
	|	1 КАК КоличествоМест,
	|	1 КАК КоличествоМестСтрок,
	|	"""" КАК НомерСчета
	|ИЗ
	|	Документ.ЯМ_ЗаявкаНаДоставку КАК ЯМ_ЗаявкаНаДоставку
	|ГДЕ
	|	ЯМ_ЗаявкаНаДоставку.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаНачала, ДЕНЬ) И КОНЕЦПЕРИОДА(&ДатаОкончания, ДЕНЬ)
	|	И ЯМ_ЗаявкаНаДоставку.Проведен");
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда 
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл 
			НоваяСтрока = Новый Структура("НомерСтроки,
			|НомерЗаказа,
			|Широта,
			|Долгота,
			|НаименованиеПолучателя,
			|АдресПолучателя,
			|ВременноеОкно,
			|ЖесткоеВременноеОкно,
			|ВремяОбслуживанияАдрес,
			|ВремяОбслуживанияЗаказ,
			|ВесБрутто,
			|КоличествоМест,
			|НеобходимыеСвойстваМашины,
			|Ширина,
			|Глубина,
			|Высота,
			|ШтрафыЗаМинуту,
			|ШтрафыЗаФактНарушенияОкнаДоставки,
			|ШтрафыЗаНедоставку,
			|ТипЗаказа,
			|ВремяЗагрузкиЗаказаНаСкладе,
			|Ссылка,
			|НомерСчета,
			|Комментарий,
			|Контрагент,
			|ТочностьГеокодирования");
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка,,"Ширина, Глубина, Высота");
			НоваяСтрока.Ширина = Выборка.Ширина * Выборка.Глубина * Выборка.Высота * Выборка.КоличествоМест;
			Если НоваяСтрока.Ширина > 0 Тогда 
				НоваяСтрока.Глубина = 1;
				НоваяСтрока.Высота = 1;
			Иначе
				НоваяСтрока.Глубина = 0;
				НоваяСтрока.Высота = 0;
			КонецЕсли;
						 			
			Если Настройки.Свойство("СпособУчета_КоличествоМест") И 
														Настройки.СпособУчета_КоличествоМест = "Количество_Строк" Тогда
				НоваяСтрока.КоличествоМест = Выборка.КоличествоМестСтрок;
			КонецЕсли;
			
			Комментарий = НоваяСтрока.Комментарий;
			
			Если Конфигурация = "БП" Тогда 
				//НоваяСтрока.АдресПолучателя = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Выборка.Контрагент, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
			ИначеЕсли Конфигурация = "БИТУМЦ" Тогда
				
				Если Выборка.ВидУслуги = 0 Тогда
					Комментарий = Комментарий + " Оплата: взять " + Формат(Выборка.Сумма,"ЧДЦ=2; ЧН=0") + " р.";
				Иначе
					Комментарий = Комментарий + " Оплата: " + Выборка.СтраховаяКомпания;
				КонецЕсли;
			КонецЕсли;
			НоваяСтрока.Комментарий = Комментарий;
			
			////НоваяСтрока.ВременноеОкно = ?(ЗначениеЗаполнено(Выборка.ВременноеОкноС), Строка(Выборка.ВременноеОкноС), "") + 
			////	?(ЗначениеЗаполнено(Выборка.ВременноеОкноПо), "-" + Строка(Выборка.ВременноеОкноПо), "");
						
			// координаты точек доставки должны быть взяты из учетной системы
			// либо сформированы геокодером по адресу точки доставки на стороне клиента
			// один из геокодеров - Яндекс: https://tech.yandex.ru/maps/geocoder/
			//
			// так как поля широты и долготы обязательны в структуре запроса,
			// для демонстрации работы они будут сгенерированы случайно рядом
			// с кооридинатами склада развоза
			
			/// ++ генерация случайных кооридинат по координатам склада
			Если Настройки.Свойство("ДемоКоординаты") И Настройки.ДемоКоординаты = Истина Тогда 
				ДанныеСклада = ПолучитьДанныеСклада(СкладОтгрузки);
				ШирСклада = Строка(Цел(ДанныеСклада.point.lat));
				ДолСклада = Строка(Цел(ДанныеСклада.point.lon));
				Шир = "";
				Для ИИ = 1 По 6 Цикл 
					УИД = Новый УникальныйИдентификатор;    
					ГСЧ = Новый ГенераторСлучайныхЧисел(КодСимвола(Лев(УИД,5)) + КодСимвола(Лев(УИД,4)));
					Ч = ГСЧ.СлучайноеЧисло(0, 9);
					Шир = Шир + Строка(Ч);
				КонецЦикла;
				НоваяСтрока.Широта = Число(ШирСклада + "." + Шир);
				Дол = "";
				Для ИИ = 1 По 6 Цикл
					УИД = Новый УникальныйИдентификатор;    
					ГСЧ = Новый ГенераторСлучайныхЧисел(КодСимвола(Лев(УИД,5)) + КодСимвола(Лев(УИД,4)));
					Ч = ГСЧ.СлучайноеЧисло(0, 9);
					Дол = Дол + Строка(Ч);
				КонецЦикла;
				НоваяСтрока.Долгота = Число(ДолСклада + "." + Дол);
			КонецЕсли;	
			/// --
			
			ДанныеЗаказов.Добавить(НоваяСтрока);
			
		КонецЦикла;	
		
	КонецЕсли;
	
	Если Настройки.Свойство("УчетЛотков") И Настройки.УчетЛотков = Истина Тогда
		УчетЛотков = Истина;
	Иначе
		УчетЛотков = Ложь;
	КонецЕсли;
	
	//todo: ускорить
	Для Каждого Стр Из ДанныеЗаказов Цикл
		Если УчетЛотков Тогда
			Стр.КоличествоМест = ПолучитьКоличествоМест(стр.Ссылка);
		КонецЕсли;
		
		//Если ЗначениеЗаполнено(Стр.РежимРаботыОткрытие) И ЗначениеЗаполнено(Стр.РежимРаботыЗакрытие) Тогда
		//	Стр.РежимРаботы = Формат(Стр.РежимРаботыОткрытие,"ДФ=ЧЧ:мм") + "-" + Формат(Стр.РежимРаботыЗакрытие,"ДФ=ЧЧ:мм");
		//КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеЗаказов;
	
КонецФункции

&НаСервере
Функция ПолучитьКоличествоМест(Реализация) Экспорт
	Кол = 0;
	Попытка
		Для Каждого Стр Из Реализация.Товары Цикл
			Попытка
				Лоток = УправлениеСвойствами.ЗначениеСвойства(Стр.Номенклатура,ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя","СколькоЕдиницВмещаетсяВЛоток_be3cbe10b86a4e0c94e5c96f37ec1a3c"));
				//Коробка = УправлениеСвойствами.ЗначениеСвойства(Стр.Номенклатура,ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя","СколькоЕдиницВмещаетсяВКоробку_c6d392113a854eada238c18c8ac3c9aa"));
				
				//ПроверимКоробку = Стр.Количество / Коробка;
				//ЦКоробка = Стр.Количество % Коробка;
				//Если ПроверимКоробку = ЦКоробка Тогда
				//	К = ПроверимКоробку * 2;
				//Иначе
					К = Стр.Количество / Лоток;
				//КонецЕсли;
				
				Кол = Кол + К;
			Исключение
				Кол = Кол + 1;
				Сообщить("У номенклатуры не заполнена размерность тары транспортировки + " + Строка(Стр.Номенклатура));
			КонецПопытки;
		КонецЦикла;
	Исключение
		Кол = Кол + 1;
		Сообщить("Ошибка: КТ500СЕВЛ, обратитесь к разработчику.");
	КонецПопытки;
	Возврат Кол;
КонецФункции

Функция СформироватьТекстЗапросаВЗависимостиОтКонфигурации(ПараметрыЗапроса)
	Текст = "";
	Конфигурация = ПараметрыЗапроса.Конфигурация;
	
	Если Конфигурация = "УТ" ИЛИ Конфигурация = "КА" Тогда 
		//todo: ЯМ_СохраненныеКоординаты
		Текст = "ВЫБРАТЬ
		|	ЗаказКлиента.Номер КАК НомерЗаказа,
		|	ЗаказКлиента.Ссылка КАК Ссылка,
		|	ПОДСТРОКА(ЗаказКлиента.Комментарий, 1, 100) КАК Комментарий,
		|	ЗаказКлиента.Контрагент.Представление КАК НаименованиеПолучателя,
		|	ЗаказКлиента.Контрагент КАК Контрагент,
		|	ЗаказКлиента.АдресДоставки КАК АдресПолучателя,
		|	ЗаказКлиента.ВремяДоставкиС КАК ВременноеОкноС,
		|	ЗаказКлиента.ВремяДоставкиПо КАК ВременноеОкноПо,
		|	ЕСТЬNULL(СРЕДНЕЕ(ЗаказКлиентаТовары.Упаковка.Ширина), 0) КАК Ширина,
		|	ЕСТЬNULL(СРЕДНЕЕ(ЗаказКлиентаТовары.Упаковка.Высота), 0) КАК Высота,
		|	ЕСТЬNULL(СРЕДНЕЕ(ЗаказКлиентаТовары.Упаковка.Глубина), 0) КАК Глубина,
		|	ЕСТЬNULL(СУММА(ЗаказКлиентаТовары.Упаковка.Вес), 0) * СУММА(ЗаказКлиентаТовары.Количество) КАК ВесБрутто,
		|	СУММА(ЗаказКлиентаТовары.Количество) КАК КоличествоМест,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиентаТовары.НомерСтроки) КАК КоличествоМестСтрок,
		|	Истина КАК Использовать
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
		|		ПО ЗаказКлиентаТовары.Ссылка = ЗаказКлиента.Ссылка
		|ГДЕ
		|	ЗаказКлиента.Дата МЕЖДУ &ДатаНачало И &ДатаОкончание
		|	И ЗаказКлиента.Склад = &Склад
		|	И ЗаказКлиента.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказКлиента.Номер,
		|	ЗаказКлиента.Ссылка,
		|	ЗаказКлиента.АдресДоставки,
		|	ЗаказКлиента.ВремяДоставкиС,
		|	ЗаказКлиента.ВремяДоставкиПо,
		|	ЗаказКлиента.Контрагент,
		|	ЗаказКлиента.Контрагент.Представление";
	ИначеЕсли Конфигурация = "БП" Тогда 
		Текст = "ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Номер КАК НомерЗаказа,
		|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
		|	ПОДСТРОКА(РеализацияТоваровУслуг.Комментарий, 1, 100) КАК Комментарий,
		|	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
		|	ПОДСТРОКА(РеализацияТоваровУслуг.Контрагент.Наименование, 1, 200) КАК НаименованиеПолучателя,
		|	РеализацияТоваровУслуг.АдресДоставки КАК АдресПолучателя,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ВременноеОкноС,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ВременноеОкноПо,
		|	РеализацияТоваровУслуг.ЯМ_РежимРаботы КАК ВременноеОкно,
		|	0 КАК Ширина,
		|	0 КАК Высота,
		|	0 КАК Глубина,
		|	0 КАК ВесБрутто,
		|	СУММА(РеализацияТоваровУслугТовары.Количество) КАК КоличествоМест,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РеализацияТоваровУслугТовары.НомерСтроки) КАК КоличествоМестСтрок,
		|	РеализацияТоваровУслуг.СчетНаОплатуПокупателю.Номер КАК НомерСчета,
		|	ЯМ_СохраненныеКоординаты.Широта КАК Широта,
		|	ЯМ_СохраненныеКоординаты.Долгота КАК Долгота,
		|	Истина КАК Использовать
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЯМ_СохраненныеКоординаты КАК ЯМ_СохраненныеКоординаты
		|			ПО РеализацияТоваровУслуг.Контрагент = ЯМ_СохраненныеКоординаты.Контрагент
		|				И РеализацияТоваровУслуг.АдресДоставки = ЯМ_СохраненныеКоординаты.Адрес
		|		ПО РеализацияТоваровУслугТовары.Ссылка = РеализацияТоваровУслуг.Ссылка
		|ГДЕ
		|	РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНачало И &ДатаОкончание
		|	И РеализацияТоваровУслуг.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	РеализацияТоваровУслуг.Номер,
		|	РеализацияТоваровУслуг.Ссылка,
		|	РеализацияТоваровУслуг.АдресДоставки,
		|	РеализацияТоваровУслуг.Контрагент,
		|	РеализацияТоваровУслуг.ЯМ_РежимРаботы,
		|	ПОДСТРОКА(РеализацияТоваровУслуг.Комментарий, 1, 100),
		|	ПОДСТРОКА(РеализацияТоваровУслуг.Контрагент.Наименование, 1, 200),
		|	РеализацияТоваровУслуг.СчетНаОплатуПокупателю.Номер,
		|	ЯМ_СохраненныеКоординаты.Широта,
		|	ЯМ_СохраненныеКоординаты.Долгота";
	ИначеЕсли Конфигурация = "УНФ" Тогда 
		//todo: ЯМ_СохраненныеКоординаты
		Текст = "ВЫБРАТЬ
		|	ЗаказПокупателя.Номер КАК НомерЗаказа,
		|	ЗаказПокупателя.Ссылка КАК Ссылка,
		|	ПОДСТРОКА(ЗаказПокупателя.Комментарий, 1, 100) КАК Комментарий,
		|	ЗаказПокупателя.Контрагент.Представление КАК НаименованиеПолучателя,
		|	ЗаказПокупателя.Контрагент КАК Контрагент,
		|	ЗаказПокупателя.АдресДоставки КАК АдресПолучателя,
		|	ЗаказПокупателя.ВремяДоставкиС КАК ВременноеОкноС,
		|	ЗаказПокупателя.ВремяДоставкиПо КАК ВременноеОкноПо,
		|	0 КАК Ширина,
		|	0 КАК Высота,
		|	0 КАК Глубина,
		|	0 КАК ВесБрутто,
		|	СУММА(ЗаказПокупателяЗапасы.Количество) КАК КоличествоМест,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказПокупателяЗапасы.НомерСтроки) КАК КоличествоМестСтрок,
		|	Истина КАК Использовать
		|ИЗ
		|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|		ПО ЗаказПокупателяЗапасы.Ссылка = ЗаказПокупателя.Ссылка
		|ГДЕ
		|	ЗаказПокупателя.Дата МЕЖДУ &ДатаНачало И &ДатаОкончание
		|	И ЗаказПокупателя.Проведен
		|СГРУППИРОВАТЬ ПО
		|	ЗаказПокупателя.Номер,
		|	ЗаказПокупателя.Ссылка,
		|	ЗаказПокупателя.АдресДоставки,
		|	ЗаказПокупателя.ВремяДоставкиС,
		|	ЗаказПокупателя.ВремяДоставкиПо,
		|	ЗаказПокупателя.Контрагент,
		|	ЗаказПокупателя.Контрагент.Представление";
	ИначеЕсли Конфигурация = "БИТУМЦ" Тогда
		Текст = "ВЫБРАТЬ
		|	Заявка.Номер КАК НомерЗаказа,
		|	ПОДСТРОКА(Заявка.Примечание, 1, 100) КАК Комментарий,
		|	Заявка.Клиент КАК НаименованиеПолучателя,
		|	Заявка.Клиент КАК Контрагент,
		|	Заявка.Адрес КАК АдресПолучателя,
		|	Заявка.ВремяНачалаЖелаемое КАК ВременноеОкноС,
		|	Заявка.ВремяОкончанияЖелаемое КАК ВременноеОкноПо,
		|	0 КАК Ширина,
		|	0 КАК Высота,
		|	0 КАК Глубина,
		|	0 КАК ВесБрутто,
		|	1 КАК КоличествоМест,
		|	СУММА(ЗаявкаРаботы.Количество) КАК КоличествоТоваров,
		|	Заявка.Ссылка КАК Ссылка,
		|	СУММА(ЗаявкаРаботы.Сумма) КАК Сумма,
		|	Заявка.СтраховаяКомпания КАК СтраховаяКомпания,
		|	Заявка.ВидУслуги КАК ВидУслуги,
		|	ЯМ_СохраненныеКоординаты.Широта КАК Широта,
		|	ЯМ_СохраненныеКоординаты.Долгота КАК Долгота,
		|	Истина КАК Использовать
		|ИЗ
		|	Документ.Заявка КАК Заявка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Заявка.Работы КАК ЗаявкаРаботы
		|		ПО (ЗаявкаРаботы.Ссылка = Заявка.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЯМ_СохраненныеКоординаты КАК ЯМ_СохраненныеКоординаты
		|		ПО Заявка.Клиент = ЯМ_СохраненныеКоординаты.Контрагент
		|			И Заявка.Адрес = ЯМ_СохраненныеКоординаты.Адрес
		|ГДЕ
		|	Заявка.ДатаНачала МЕЖДУ &ДатаНачало И &ДатаОкончание
		|	И НЕ Заявка.ПометкаУдаления
		|	И Заявка.ПричинаОбращения = &ПричинаОбращения
		|
		|СГРУППИРОВАТЬ ПО
		|	Заявка.Номер,
		|	Заявка.Адрес,
		|	Заявка.ВремяНачалаЖелаемое,
		|	Заявка.ВремяОкончанияЖелаемое,
		|	Заявка.Клиент,
		|	Заявка.Ссылка,
		|	ПОДСТРОКА(Заявка.Примечание, 1, 100),
		|	Заявка.Клиент,
		|	Заявка.СтраховаяКомпания,
		|	Заявка.ВидУслуги,
		|	ЯМ_СохраненныеКоординаты.Широта,
		|	ЯМ_СохраненныеКоординаты.Долгота";
		Если ПараметрыЗапроса.ДополнительныеПараметры = "Консультация" Тогда
			Текст = СтрЗаменить(Текст,"И Заявка.ПричинаОбращения = &ПричинаОбращения","И НЕ Заявка.ПричинаОбращения = &ПричинаОбращения");
		Иначе
			Текст = Текст;
		КонецЕсли;
	ИначеЕсли Конфигурация = "Розница" Тогда
		//todo: ЯМ_СохраненныеКоординаты
		Текст = "ВЫБРАТЬ
		|	ЗаказПокупателя.Номер КАК НомерЗаказа,
		|	ЗаказПокупателя.Ссылка КАК Ссылка,
		|	ПОДСТРОКА(ЗаказПокупателя.Комментарий, 1, 100) КАК Комментарий,
		|	ЗаказПокупателя.Контрагент.Представление КАК НаименованиеПолучателя,
		|	ЗаказПокупателя.Контрагент КАК Контрагент,
		|	ЗаказПокупателя.АдресДоставки КАК АдресПолучателя,
		|	ЗаказПокупателя.ЖелаемаяДатаПродажи КАК ВременноеОкноС,
		|	ЗаказПокупателя.ЖелаемаяДатаПродажи КАК ВременноеОкноПо,
		|	0 КАК Ширина,
		|	0 КАК Высота,
		|	0 КАК Глубина,
		|	0 КАК ВесБрутто,
		|	СУММА(ЗаказПокупателяЗапасы.Количество) КАК КоличествоМест,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказПокупателяЗапасы.НомерСтроки) КАК КоличествоМестСтрок,
		|	Истина КАК Использовать
		|ИЗ
		|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяЗапасы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|		ПО ЗаказПокупателяЗапасы.Ссылка = ЗаказПокупателя.Ссылка
		|ГДЕ
		|	ЗаказПокупателя.Дата МЕЖДУ &ДатаНачало И &ДатаОкончание
		|	И ЗаказПокупателя.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказПокупателя.Номер,
		|	ЗаказПокупателя.Ссылка,
		|	ЗаказПокупателя.ЖелаемаяДатаПродажи,
		|	ЗаказПокупателя.Контрагент,
		|	ЗаказПокупателя.Контрагент.Представление,
		|	ЗаказПокупателя.АдресДоставки,
		|	ЗаказПокупателя.ЖелаемаяДатаПродажи";
	КонецЕсли;
	
	Возврат Текст;
КонецФункции

Функция ПолучитьГруппыБалансировки() Экспорт 
	
	ГруппыБалансировки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЯМ_ГруппыБалансировки.Наименование КАК id,
	|	ЯМ_ГруппыБалансировки.ШтрафЗаОтклонениеОтСреднегоВремениМаршрута КАК hour,
	|	ЯМ_ГруппыБалансировки.ШтрафЗаОтклонениеОтСреднегоКоличестваОстановок КАК stop
	|ИЗ
	|	Справочник.ЯМ_ГруппыБалансировки КАК ЯМ_ГруппыБалансировки
	|ГДЕ
	|	НЕ ЯМ_ГруппыБалансировки.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		ГруппыБалансировкиШтрафы = Новый Структура("hour, stop", Выборка.hour, Выборка.stop);
		ГруппыБалансировкиГруппа = Новый Структура("id, penalty", Выборка.id, ГруппыБалансировкиШтрафы);
		ГруппыБалансировки.Добавить(ГруппыБалансировкиГруппа);
	КонецЦикла;
	
	Возврат ГруппыБалансировки;
	
КонецФункции
